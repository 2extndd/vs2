#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–±–∞–Ω–∞ —Å —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–º–∏ –ø—Ä–æ–∫—Å–∏ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
–î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ v1.1 (Railway compatible)
"""

import asyncio
import time
import random
import logging
import requests
import json
from typing import Dict, List, Optional
from fake_useragent import UserAgent
import Config

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ HTTP —Ä–µ–∂–∏–º –¥–ª—è Railway —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
PLAYWRIGHT_AVAILABLE = False

class AdvancedAntiBan:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–±–∞–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.ua = UserAgent()
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.max_retries = 3
        self.backoff_factor = 2.0
        self.current_delay = 1.0
        self.max_delay = 30.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.http_requests = 0
        self.http_success = 0
        self.errors_403 = 0
        self.errors_429 = 0
        self.errors_521 = 0
        self.consecutive_errors = 0
        
        # –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫—Å–∏
        self.proxies = []
        self.current_proxy = None
        self.proxy_rotation_count = 0
        self.max_requests_per_proxy = 5  # –†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
        
        # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∞–Ω—Ç–∏–±–æ—Ç-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.client_profiles = self._generate_client_profiles()
        self.current_profile = None
        
        # –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.session_cookies = {}
        self.session_created = time.time()
        self.session_requests = 0
        self.max_session_requests = 50
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        self.proxy_stats = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        self._load_proxies()
        
    def _load_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        proxy_list = [
            "uxhsjsf86p:QjN9YOVXOTh404nh@175.110.113.245:23250",
            "uxhsjsf86p:QjN9YOVXOTh404nh@93.190.137.111:13196", 
            "uxhsjsf86p:QjN9YOVXOTh404nh@185.100.232.163:26649",
            "uxhsjsf86p:QjN9YOVXOTh404nh@91.232.105.44:11829"
        ]
        
        for proxy in proxy_list:
            try:
                username, password = proxy.split('@')[0].split(':')
                host, port = proxy.split('@')[1].split(':')
                
                proxy_dict = {
                    'http': f'http://{username}:{password}@{host}:{port}',
                    'https': f'http://{username}:{password}@{host}:{port}',
                    'host': host,
                    'port': port,
                    'requests': 0,
                    'success': 0,
                    'errors': 0
                }
                self.proxies.append(proxy_dict)
                logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏: {host}:{port}")
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")
        
        logging.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(self.proxies)}")
        
    def _generate_client_profiles(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"""
        profiles = []
        
        # Chrome –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –û–°
        chrome_profiles = [
            {
                'name': 'Chrome-Windows',
                'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'accept': 'application/json, text/plain, */*',
                'accept_language': 'en-US,en;q=0.9,de;q=0.8',
                'accept_encoding': 'gzip, deflate, br',
                'sec_fetch_dest': 'empty',
                'sec_fetch_mode': 'cors',
                'sec_fetch_site': 'same-origin'
            },
            {
                'name': 'Chrome-MacOS',
                'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'accept': 'application/json, text/plain, */*',
                'accept_language': 'en-US,en;q=0.9,de;q=0.8',
                'accept_encoding': 'gzip, deflate, br',
                'sec_fetch_dest': 'empty',
                'sec_fetch_mode': 'cors',
                'sec_fetch_site': 'same-origin'
            }
        ]
        
        # Firefox –ø—Ä–æ—Ñ–∏–ª–∏
        firefox_profiles = [
            {
                'name': 'Firefox-Windows',
                'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
                'accept': 'application/json, text/plain, */*',
                'accept_language': 'en-US,en;q=0.9,de;q=0.8',
                'accept_encoding': 'gzip, deflate, br',
                'sec_fetch_dest': 'empty',
                'sec_fetch_mode': 'cors',
                'sec_fetch_site': 'same-origin'
            },
            {
                'name': 'Firefox-MacOS',
                'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0',
                'accept': 'application/json, text/plain, */*',
                'accept_language': 'en-US,en;q=0.9,de;q=0.8',
                'accept_encoding': 'gzip, deflate, br',
                'sec_fetch_dest': 'empty',
                'sec_fetch_mode': 'cors',
                'sec_fetch_site': 'same-origin'
            }
        ]
        
        profiles.extend(chrome_profiles)
        profiles.extend(firefox_profiles)
        
        logging.info(f"üé≠ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(profiles)}")
        return profiles
        
    def _get_random_profile(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        return random.choice(self.client_profiles)
        
    def _rotate_proxy(self):
        """–†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏"""
        if not self.proxies:
            return None
            
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—à–∏–±–æ–∫
        available_proxies = [p for p in self.proxies if p['errors'] < 3]
        if not available_proxies:
            available_proxies = self.proxies
            
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        self.current_proxy = random.choice(available_proxies)
        self.proxy_rotation_count = 0
        
        logging.info(f"üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏: {self.current_proxy['host']}:{self.current_proxy['port']}")
        return self.current_proxy
        
    def disable_proxies(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        self.current_proxy = None
        logging.info("üì° –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
    def enable_proxies(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        if self.proxies:
            self._rotate_proxy()
            logging.info("üì° –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏")
        
    def get_random_headers(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π"""
        profile = self._get_random_profile()
        self.current_profile = profile
        
        headers = {
            "User-Agent": profile['user_agent'],
            "Accept": profile['accept'],
            "Accept-Language": profile['accept_language'],
            "Accept-Encoding": profile['accept_encoding'],
            "DNT": "1",
            "Connection": "keep-alive",
            "Cache-Control": "no-cache",
            "Sec-Fetch-Dest": profile['sec_fetch_dest'],
            "Sec-Fetch-Mode": profile['sec_fetch_mode'],
            "Sec-Fetch-Site": profile['sec_fetch_site']
        }
        
        return headers
    
    def human_delay(self):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        if self.consecutive_errors > 0:
            base_delay = 2.0 + (self.consecutive_errors * 1.5)
            delay = random.uniform(base_delay, base_delay + 3.0)
        else:
            delay = random.uniform(1.0, 3.0)
        
        logging.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f}s")
        time.sleep(delay)

    def exponential_backoff(self):
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        if self.consecutive_errors > 0:
            self.current_delay = min(self.current_delay * self.backoff_factor, self.max_delay)
            delay = random.uniform(self.current_delay * 0.8, self.current_delay * 1.2)
            logging.warning(f"üö´ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f}s (–æ—à–∏–±–æ–∫: {self.consecutive_errors})")
            time.sleep(delay)
        else:
            self.human_delay()

    def reset_backoff(self):
        """–°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–µ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ"""
        if self.consecutive_errors > 0:
            logging.info(f"‚úÖ –°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–µ–∫ (–±—ã–ª–æ –æ—à–∏–±–æ–∫: {self.consecutive_errors})")
        self.consecutive_errors = 0
        self.current_delay = 1.0
    

    def make_http_request(self, url: str, params: dict, cookies: dict = None) -> Optional[dict]:
        """HTTP –∑–∞–ø—Ä–æ—Å —Å –∞–Ω—Ç–∏–±–∞–Ω–æ–º –∏ –ø—Ä–æ–∫—Å–∏"""
        logging.info(f"üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ (ID: {id(self)}): –ù–∞—á–∏–Ω–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å")
        self.http_requests += 1
        self.session_requests += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–∫—Å–∏)
        if self.proxies and (self.proxy_rotation_count >= self.max_requests_per_proxy or 
            self.current_proxy is None):
            self._rotate_proxy()
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–õ–£–ß–ï–ù–ò–Ø COOKIES
        if cookies is None or not cookies:
            try:
                import Config
                main_url = Config.vinted_url
                headers = self.get_random_headers()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è cookies
                logging.info(f"üç™ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ cookies —Å {main_url}")
                main_response = self.session.get(main_url, headers=headers, timeout=30)
                
                if main_response.status_code == 200:
                    cookies = self.session.cookies.get_dict()
                    logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã cookies: {cookies}")
                else:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è cookies: HTTP {main_response.status_code}")
                    cookies = {}
                    
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è cookies: {e}")
                cookies = {}
        else:
            logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ cookies: {cookies}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            if (self.session_requests > self.max_session_requests or 
                time.time() - self.session_created > 1800):  # 30 –º–∏–Ω—É—Ç
                self.refresh_session()
            
            # –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–∫—Å–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            headers = self.get_random_headers()
            logging.info(f"üåê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: HTTP –∑–∞–ø—Ä–æ—Å –∫ {url}")
            logging.info(f"üîß –ü—Ä–æ—Ñ–∏–ª—å: {self.current_profile['name']}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–ª–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            if self.current_proxy:
                logging.info(f"üîß –ü—Ä–æ–∫—Å–∏: {self.current_proxy['host']}:{self.current_proxy['port']}")
                proxy_dict = {
                    'http': self.current_proxy['http'],
                    'https': self.current_proxy['https']
                }
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
                self.current_proxy['requests'] += 1
                self.proxy_rotation_count += 1
            else:
                logging.info(f"üîß –ü—Ä–æ–∫—Å–∏: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
                proxy_dict = None
                self.proxy_rotation_count += 1
            
            logging.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            logging.info(f"üç™ Cookies: {cookies}")
            
            response = self.session.get(
                url,
                params=params,
                headers=headers,
                proxies=proxy_dict,
                timeout=30,
                cookies=cookies
            )
            
            logging.info(f"üìù –û—Ç–≤–µ—Ç: {response.text[:200]}")
            logging.info(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò 401 - –ü–ï–†–ï–ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
            if response.status_code == 401:
                logging.warning(f"üö´ HTTP 401 - –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                self.consecutive_errors += 1
                if self.current_proxy:
                    self.current_proxy['errors'] += 1
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                try:
                    logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                    import Config
                    main_url = Config.vinted_url
                    
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ cookies
                    self.session.cookies.clear()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ cookies
                    main_response = self.session.get(main_url, headers=headers, timeout=30)
                    if main_response.status_code == 200:
                        new_cookies = self.session.cookies.get_dict()
                        logging.info(f"‚úÖ –ù–æ–≤—ã–µ cookies –ø–æ–ª—É—á–µ–Ω—ã: {new_cookies}")
                        
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ cookies
                        response = self.session.get(
                            url,
                            params=params,
                            headers=headers,
                            proxies=proxy_dict,
                            timeout=30,
                            cookies=new_cookies
                        )
                        logging.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å: HTTP {response.status_code}")
                    else:
                        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ cookies: HTTP {main_response.status_code}")
                        
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            
            if response.status_code != 200:
                logging.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text[:100]}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                self.http_success += 1
                if self.current_proxy:
                    self.current_proxy['success'] += 1
                self.reset_backoff()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏
                self.session_cookies.update(response.cookies)
                
                logging.info(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ (ID: {id(self)}): HTTP —É—Å–ø–µ—Ö! –°—á–µ—Ç—á–∏–∫–∏: {self.http_requests}/{self.http_success}")
                return response.json()
                
            elif response.status_code == 403:
                self.errors_403 += 1
                self.consecutive_errors += 1
                if self.current_proxy:
                    self.current_proxy['errors'] += 1
                logging.warning(f"üö´ HTTP 403 Forbidden (–æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors})")
                
            elif response.status_code == 429:
                self.errors_429 += 1
                self.consecutive_errors += 1
                if self.current_proxy:
                    self.current_proxy['errors'] += 1
                logging.warning(f"‚è±Ô∏è HTTP 429 Too Many Requests")
                
            elif response.status_code == 521:
                self.errors_521 += 1
                self.consecutive_errors += 1
                if self.current_proxy:
                    self.current_proxy['errors'] += 1
                logging.warning(f"üîß HTTP 521 Server Down")
                
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (401, 500, etc.)
                self.consecutive_errors += 1
                if self.current_proxy:
                    self.current_proxy['errors'] += 1
                logging.warning(f"‚ö†Ô∏è HTTP {response.status_code}: {response.text[:100]}")
                
            # –ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö - —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
            if self.consecutive_errors >= 3 and self.proxies:
                self._rotate_proxy()
                self.refresh_session()
                
            return None
            
        except Exception as e:
            logging.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            self.consecutive_errors += 1
            if self.current_proxy:
                self.current_proxy['errors'] += 1
            return None
    

    def refresh_session(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        self.session.close()
        self.session = requests.Session()
        self.session_cookies = {}
        self.session_created = time.time()
        self.session_requests = 0
        logging.info("üîÑ HTTP —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.session.close()
            logging.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫—Å–∏"""
        total_requests = self.http_requests
        total_success = self.http_success
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy_stats = {}
        for proxy in self.proxies:
            if proxy['requests'] > 0:
                success_rate = (proxy['success'] / proxy['requests']) * 100
                proxy_stats[f"{proxy['host']}:{proxy['port']}"] = {
                    'requests': proxy['requests'],
                    'success': proxy['success'],
                    'errors': proxy['errors'],
                    'success_rate': success_rate
                }
        
        stats = {
            'http_requests': self.http_requests,
            'http_success': self.http_success,
            'browser_requests': 0,
            'browser_success': 0,
            'total_requests': total_requests,
            'total_success': total_success,
            'success_rate': (total_success / max(total_requests, 1)) * 100,
            'errors_403': self.errors_403,
            'errors_429': self.errors_429,
            'errors_521': self.errors_521,
            'consecutive_errors': self.consecutive_errors,
            'browser_available': False,
            'proxies_count': len(self.proxies),
            'current_proxy': f"{self.current_proxy['host']}:{self.current_proxy['port']}" if self.current_proxy else None,
            'proxy_stats': proxy_stats
        }
        
        logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã (ID: {id(self)}): HTTP={self.http_requests}/{self.http_success}")
        return stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_advanced_system_instance = None

def get_advanced_system():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    global _advanced_system_instance
    if _advanced_system_instance is None:
        _advanced_system_instance = AdvancedAntiBan()
        logging.info(f"üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {id(_advanced_system_instance)}")
    return _advanced_system_instance

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
advanced_system = get_advanced_system()