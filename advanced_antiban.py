#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–±–∞–Ω–∞ —Å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —ç–º—É–ª—è—Ü–∏–µ–π –∏ –ø—Ä–æ–∫—Å–∏
–î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ v1.0
"""

import asyncio
import time
import random
import logging
import requests
import json
from typing import Dict, List, Optional
from fake_useragent import UserAgent
import Config

try:
    from playwright.async_api import async_playwright, Browser, Page, BrowserContext
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ HTTP —Ä–µ–∂–∏–º")

class AdvancedAntiBan:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–±–∞–Ω–∞"""
    
    def __init__(self):
        self.ua = UserAgent()
        self.session = requests.Session()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.playwright = None
        self.browser = None
        self.context = None  
        self.page = None
        self.browser_available = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.max_retries = 3
        self.backoff_factor = 2.0
        self.current_delay = 1.0
        self.max_delay = 30.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.http_requests = 0
        self.http_success = 0
        self.browser_requests = 0
        self.browser_success = 0
        self.errors_403 = 0
        self.errors_429 = 0
        self.errors_521 = 0
        self.consecutive_errors = 0
        
        # –ü—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.proxy_pool = []
        self.current_proxy_index = 0
        self.load_proxies()
        
        # –°–µ—Å—Å–∏–∏ –∏ –∫—É–∫–∏
        self.session_cookies = {}
        self.session_created = time.time()
        self.session_requests = 0
        self.max_session_requests = 50
        
    def load_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–∏—Ö
        logging.info("üì° –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–∫—Å–∏")
        
    def get_current_proxy(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        return None  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        
    def rotate_proxy(self):
        """–†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏"""
        # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    
    def get_random_headers(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        return {
            "User-Agent": self.ua.random,
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.9,de;q=0.8,ru;q=0.7",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Cache-Control": "no-cache",
            "Pragma": "no-cache"
        }
    
    def human_delay(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ (0.5-3—Å)"""
        delay = random.uniform(0.5, 3.0)
        time.sleep(delay)
    
    def exponential_backoff(self):
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        delay = min(self.current_delay * self.backoff_factor, self.max_delay)
        self.current_delay = delay
        logging.warning(f"‚è≥ Backoff delay: {delay:.1f}s")
        time.sleep(delay)
    
    def reset_backoff(self):
        """–°–±—Ä–æ—Å backoff –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        self.current_delay = 1.0
        self.consecutive_errors = 0
    
    async def initialize_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        if not PLAYWRIGHT_AVAILABLE:
            return False
            
        try:
            self.playwright = await async_playwright().start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            browser_args = [
                '--no-sandbox',
                '--disable-setuid-sandbox', 
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--disable-features=TranslateUI',
                '--disable-ipc-flooding-protection',
                '--user-agent=' + self.ua.random
            ]
            
            # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ë–ï–ó –ø—Ä–æ–∫—Å–∏
            self.browser = await self.playwright.chromium.launch(
                headless=True,
                args=browser_args
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ü–∏–µ–π
            self.context = await self.browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent=self.ua.random,
                locale='en-US',
                timezone_id='America/New_York',
                extra_http_headers=self.get_random_headers()
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            await self.context.add_init_script("""
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5],
                });
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['en-US', 'en'],
                });
            """)
            
            self.page = await self.context.new_page()
            self.page.set_default_timeout(30000)
            
            self.browser_available = True
            logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            self.browser_available = False
            return False
    
    def make_http_request(self, url: str, params: dict) -> Optional[dict]:
        """HTTP –∑–∞–ø—Ä–æ—Å —Å –∞–Ω—Ç–∏–±–∞–Ω–æ–º"""
        self.http_requests += 1
        self.session_requests += 1
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if not self.browser_available and PLAYWRIGHT_AVAILABLE:
            try:
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                success = loop.run_until_complete(self.initialize_browser())
                loop.close()
                if success:
                    logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logging.warning("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            if (self.session_requests > self.max_session_requests or 
                time.time() - self.session_created > 1800):  # 30 –º–∏–Ω—É—Ç
                self.refresh_session()
            
            # –ó–∞–ø—Ä–æ—Å –ë–ï–ó –ø—Ä–æ–∫—Å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            headers = self.get_random_headers()
            logging.info(f"üåê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: HTTP –∑–∞–ø—Ä–æ—Å –∫ {url}")
            
            response = self.session.get(
                url,
                params=params,
                headers=headers,
                timeout=30,
                cookies=self.session_cookies
            )
            
            logging.info(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code != 200:
                logging.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text[:100]}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                self.http_success += 1
                self.reset_backoff()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏
                self.session_cookies.update(response.cookies)
                
                return response.json()
                
            elif response.status_code == 403:
                self.errors_403 += 1
                self.consecutive_errors += 1
                logging.warning(f"üö´ HTTP 403 Forbidden (–æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors})")
                
            elif response.status_code == 429:
                self.errors_429 += 1
                self.consecutive_errors += 1
                logging.warning(f"‚è±Ô∏è HTTP 429 Too Many Requests")
                
            elif response.status_code == 521:
                self.errors_521 += 1
                self.consecutive_errors += 1
                logging.warning(f"üîß HTTP 521 Server Down")
                
            # –ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö - —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
            if self.consecutive_errors >= 3:
                self.rotate_proxy()
                self.refresh_session()
                
            return None
            
        except Exception as e:
            logging.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            self.consecutive_errors += 1
            return None
    
    async def make_browser_request(self, url: str, params: dict) -> Optional[dict]:
        """–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JS"""
        if not self.browser_available:
            return None
            
        self.browser_requests += 1
        
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            param_str = '&'.join([f"{k}={v}" for k, v in params.items()])
            full_url = f"{url}?{param_str}"
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Cloudflare
            await self.page.goto(full_url, wait_until='networkidle')
            
            # –ñ–¥–µ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ Cloudflare
            await asyncio.sleep(random.uniform(2, 5))
            
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ JSON –¥–∞–Ω–Ω—ã–µ
            try:
                # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ JSON
                content = await self.page.content()
                if content.strip().startswith('{'):
                    data = json.loads(content)
                    self.browser_success += 1
                    self.reset_backoff()
                    return data
                
                # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ JSON –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã  
                json_element = await self.page.query_selector('pre')
                if json_element:
                    json_text = await json_element.text_content()
                    if json_text.strip().startswith('{'):
                        data = json.loads(json_text)
                        self.browser_success += 1
                        self.reset_backoff()
                        return data
                        
            except json.JSONDecodeError:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Cloudflare
            title = await self.page.title()
            if 'cloudflare' in title.lower() or 'checking' in title.lower():
                logging.warning("üå©Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Cloudflare")
                await asyncio.sleep(10)  # –ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                return None
                
            logging.warning("‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω JSON –æ—Ç–≤–µ—Ç")
            return None
            
        except Exception as e:
            logging.error(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def refresh_session(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        self.session.close()
        self.session = requests.Session()
        self.session_cookies = {}
        self.session_created = time.time()
        self.session_requests = 0
        logging.info("üîÑ HTTP —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.page:
                await self.page.close()
            if self.context:
                await self.context.close()
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
            self.session.close()
            logging.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_requests = self.http_requests + self.browser_requests
        total_success = self.http_success + self.browser_success
        
        return {
            'http_requests': self.http_requests,
            'http_success': self.http_success,
            'browser_requests': self.browser_requests,
            'browser_success': self.browser_success,
            'total_requests': total_requests,
            'total_success': total_success,
            'success_rate': (total_success / max(total_requests, 1)) * 100,
            'errors_403': self.errors_403,
            'errors_429': self.errors_429,
            'errors_521': self.errors_521,
            'consecutive_errors': self.consecutive_errors,
            'browser_available': self.browser_available,
            'proxies_count': 0,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            'current_proxy': None  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
advanced_system = AdvancedAntiBan()