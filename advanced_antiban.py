#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–±–∞–Ω–∞ —Ç–æ–ª—å–∫–æ —Å HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏
–î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ v1.1 (Railway compatible)
"""

import asyncio
import time
import random
import logging
import requests
import json
from typing import Dict, List, Optional
from fake_useragent import UserAgent
import Config

# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ HTTP —Ä–µ–∂–∏–º –¥–ª—è Railway —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
PLAYWRIGHT_AVAILABLE = False

class AdvancedAntiBan:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω—Ç–∏–±–∞–Ω–∞"""
    
    def __init__(self):
        self.ua = UserAgent()
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.max_retries = 3
        self.backoff_factor = 2.0
        self.current_delay = 1.0
        self.max_delay = 30.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.http_requests = 0
        self.http_success = 0
        self.errors_403 = 0
        self.errors_429 = 0
        self.errors_521 = 0
        self.consecutive_errors = 0
        
        # –ü—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.proxy_pool = []
        self.current_proxy_index = 0
        self.load_proxies()
        
        # –°–µ—Å—Å–∏–∏ –∏ –∫—É–∫–∏
        self.session_cookies = {}
        self.session_created = time.time()
        self.session_requests = 0
        self.max_session_requests = 50
        
    def load_proxies(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–∏—Ö
        logging.info("üì° –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–∫—Å–∏")
        
    def get_current_proxy(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏"""
        return None  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        
    def rotate_proxy(self):
        """–†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏"""
        # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    
    def get_random_headers(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        return {
            "User-Agent": self.ua.random,
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.9,de;q=0.8,ru;q=0.7",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Cache-Control": "no-cache",
            "Pragma": "no-cache"
        }
    
    def human_delay(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫ (0.5-3—Å)"""
        delay = random.uniform(0.5, 3.0)
        time.sleep(delay)
    
    def exponential_backoff(self):
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        delay = min(self.current_delay * self.backoff_factor, self.max_delay)
        self.current_delay = delay
        logging.warning(f"‚è≥ Backoff delay: {delay:.1f}s")
        time.sleep(delay)
    
    def reset_backoff(self):
        """–°–±—Ä–æ—Å backoff –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        self.current_delay = 1.0
        self.consecutive_errors = 0
    

    def make_http_request(self, url: str, params: dict, cookies: dict = None) -> Optional[dict]:
        """HTTP –∑–∞–ø—Ä–æ—Å —Å –∞–Ω—Ç–∏–±–∞–Ω–æ–º"""
        logging.info(f"üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ (ID: {id(self)}): –ù–∞—á–∏–Ω–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å")
        self.http_requests += 1
        self.session_requests += 1
        

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ cookies –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ
        if cookies is None:
            try:
                import Config
                main_url = Config.vinted_url
                headers = self.get_random_headers()
                
                # –ü–æ–ª—É—á–∞–µ–º cookies —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å
                self.session.post(main_url, headers=headers, timeout=30)
                cookies = self.session.cookies.get_dict()
                logging.info(f"üç™ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ cookies: {cookies}")
                
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è cookies: {e}")
                cookies = {}
        else:
            logging.info(f"üç™ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ cookies: {cookies}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            if (self.session_requests > self.max_session_requests or 
                time.time() - self.session_created > 1800):  # 30 –º–∏–Ω—É—Ç
                self.refresh_session()
            
            # –ó–∞–ø—Ä–æ—Å –ë–ï–ó –ø—Ä–æ–∫—Å–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ cookies
            headers = self.get_random_headers()
            logging.info(f"üåê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: HTTP –∑–∞–ø—Ä–æ—Å –∫ {url}")
            
            response = self.session.get(
                url,
                params=params,
                headers=headers,
                timeout=30,
                cookies=cookies  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ cookies
            )
            
            logging.info(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code != 200:
                logging.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text[:100]}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                self.http_success += 1
                self.reset_backoff()
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏
                self.session_cookies.update(response.cookies)
                
                logging.info(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ (ID: {id(self)}): HTTP —É—Å–ø–µ—Ö! –°—á–µ—Ç—á–∏–∫–∏: {self.http_requests}/{self.http_success}")
                return response.json()
                
            elif response.status_code == 403:
                self.errors_403 += 1
                self.consecutive_errors += 1
                logging.warning(f"üö´ HTTP 403 Forbidden (–æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.consecutive_errors})")
                
            elif response.status_code == 429:
                self.errors_429 += 1
                self.consecutive_errors += 1
                logging.warning(f"‚è±Ô∏è HTTP 429 Too Many Requests")
                
            elif response.status_code == 521:
                self.errors_521 += 1
                self.consecutive_errors += 1
                logging.warning(f"üîß HTTP 521 Server Down")
                
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (401, 500, etc.)
                self.consecutive_errors += 1
                logging.warning(f"‚ö†Ô∏è HTTP {response.status_code}: {response.text[:100]}")
                
            # –ü—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö - —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
            if self.consecutive_errors >= 3:
                self.rotate_proxy()
                self.refresh_session()
                
            return None
            
        except Exception as e:
            logging.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            self.consecutive_errors += 1
            return None
    

    def refresh_session(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        self.session.close()
        self.session = requests.Session()
        self.session_cookies = {}
        self.session_created = time.time()
        self.session_requests = 0
        logging.info("üîÑ HTTP —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self.session.close()
            logging.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_requests = self.http_requests
        total_success = self.http_success
        
        stats = {
            'http_requests': self.http_requests,
            'http_success': self.http_success,
            'browser_requests': 0,
            'browser_success': 0,
            'total_requests': total_requests,
            'total_success': total_success,
            'success_rate': (total_success / max(total_requests, 1)) * 100,
            'errors_403': self.errors_403,
            'errors_429': self.errors_429,
            'errors_521': self.errors_521,
            'consecutive_errors': self.consecutive_errors,
            'browser_available': False,
            'proxies_count': 0,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            'current_proxy': None  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        }
        
        logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã (ID: {id(self)}): HTTP={self.http_requests}/{self.http_success}")
        return stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_advanced_system_instance = None

def get_advanced_system():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    global _advanced_system_instance
    if _advanced_system_instance is None:
        _advanced_system_instance = AdvancedAntiBan()
        logging.info(f"üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {id(_advanced_system_instance)}")
    return _advanced_system_instance

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
advanced_system = get_advanced_system()