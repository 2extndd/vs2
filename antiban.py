#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è Vinted Scanner
–í–∫–ª—é—á–∞–µ—Ç: –ø—Ä–æ–∫—Å–∏, –±—Ä–∞—É–∑–µ—Ä, —Ä–æ—Ç–∞—Ü–∏—é IP, —ç–º—É–ª—è—Ü–∏—é —á–µ–ª–æ–≤–µ–∫–∞
"""

import asyncio
import random
import time
import json
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta
import requests
from fake_useragent import UserAgent
from playwright.async_api import async_playwright, Browser, Page
import aiohttp
import aiofiles

@dataclass
class ProxyConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏"""
    host: str
    port: int
    username: str
    password: str
    country: str = "DE"
    type: str = "residential"

@dataclass
class SessionData:
    """–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
    cookies: Dict
    headers: Dict
    user_agent: str
    proxy: Optional[ProxyConfig]
    created_at: datetime
    requests_count: int = 0
    errors_count: int = 0
    last_error: Optional[str] = None

class AdvancedAntiBan:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.ua = UserAgent()
        self.sessions: List[SessionData] = []
        self.current_session_index = 0
        self.browser: Optional[Browser] = None
        self.page: Optional[Page] = None
        
        # –ü—Ä–æ–∫—Å–∏ –ø—É–ª (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        self.proxy_pool = [
            ProxyConfig("proxy1.example.com", 8080, "user1", "pass1"),
            ProxyConfig("proxy2.example.com", 8080, "user2", "pass2"),
            ProxyConfig("proxy3.example.com", 8080, "user3", "pass3"),
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests = 0
        self.total_errors = 0
        self.total_blocks = 0
        self.last_rotation = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_requests_per_session = 10
        self.max_errors_per_session = 3
        self.rotation_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.backoff_multiplier = 2.0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_sessions()
    
    def _init_sessions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π"""
        for i, proxy in enumerate(self.proxy_pool):
            session = SessionData(
                cookies={},
                headers=self._generate_headers(),
                user_agent=self.ua.random,
                proxy=proxy,
                created_at=datetime.now()
            )
            self.sessions.append(session)
    
    def _generate_headers(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞"""
        return {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Cache-Control": "max-age=0"
        }
    
    async def _init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è headless –±—Ä–∞—É–∑–µ—Ä–∞"""
        if not self.browser:
            playwright = await async_playwright().start()
            proxy = self.sessions[self.current_session_index].proxy
            
            browser_args = [
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-blink-features=AutomationControlled",
                "--disable-web-security",
                "--disable-features=VizDisplayCompositor"
            ]
            
            if proxy:
                browser_args.extend([
                    f"--proxy-server={proxy.host}:{proxy.port}",
                    f"--proxy-auth={proxy.username}:{proxy.password}"
                ])
            
            self.browser = await playwright.chromium.launch(
                headless=True,
                args=browser_args
            )
            
            self.page = await self.browser.new_page()
            await self.page.set_extra_http_headers(self.sessions[self.current_session_index].headers)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            await self.page.context.set_extra_http_headers({
                'User-Agent': self.sessions[self.current_session_index].user_agent
            })
    
    async def _rotate_session(self):
        """–†–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
        old_index = self.current_session_index
        self.current_session_index = (self.current_session_index + 1) % len(self.sessions)
        
        logging.info(f"üîÑ –†–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏: {old_index} -> {self.current_session_index}")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
        if self.browser:
            await self.browser.close()
            self.browser = None
            self.page = None
        
        await self._init_browser()
    
    async def _handle_error(self, error: str, status_code: int = None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        current_session = self.sessions[self.current_session_index]
        current_session.errors_count += 1
        current_session.last_error = error
        
        self.total_errors += 1
        
        if status_code in [403, 429, 503, 521]:
            self.total_blocks += 1
            logging.warning(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {status_code} - {error}")
        
        # –†–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
        if (current_session.errors_count >= self.max_errors_per_session or 
            current_session.requests_count >= self.max_requests_per_session or
            time.time() - self.last_rotation > self.rotation_interval):
            
            await self._rotate_session()
            self.last_rotation = time.time()
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
        backoff_time = min(300, (2 ** current_session.errors_count) * self.backoff_multiplier)
        logging.info(f"‚è≥ Backoff: {backoff_time:.1f}s")
        await asyncio.sleep(backoff_time)
    
    async def smart_request(self, url: str, params: Dict = None) -> Tuple[Optional[Dict], bool]:
        """–£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–Ω—Ç–∏–±–∞–Ω –∑–∞—â–∏—Ç–æ–π"""
        try:
            await self._init_browser()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            delay = random.uniform(0.5, 3.0)
            await asyncio.sleep(delay)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            full_url = url
            if params:
                query_string = "&".join([f"{k}={v}" for k, v in params.items()])
                full_url = f"{url}?{query_string}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
            response = await self.page.goto(full_url, wait_until="networkidle")
            
            if response.status == 200:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                content = await self.page.content()
                
                # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                try:
                    # –ò—â–µ–º JSON –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
                    json_data = await self.page.evaluate("""
                        () => {
                            const scripts = document.querySelectorAll('script');
                            for (const script of scripts) {
                                if (script.textContent.includes('window.__INITIAL_STATE__')) {
                                    const match = script.textContent.match(/window\\.__INITIAL_STATE__\\s*=\\s*({.*?});/);
                                    if (match) {
                                        return JSON.parse(match[1]);
                                    }
                                }
                            }
                            return null;
                        }
                    """)
                    
                    if json_data:
                        self.sessions[self.current_session_index].requests_count += 1
                        self.total_requests += 1
                        return json_data, True
                    else:
                        # Fallback: –ø–∞—Ä—Å–∏–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π HTML
                        return {"html": content}, True
                        
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)[:50]}")
                    return None, False
                    
            else:
                await self._handle_error(f"HTTP {response.status}", response.status)
                return None, False
                
        except Exception as e:
            await self._handle_error(str(e))
            return None, False
    
    async def get_vinted_items(self, search_params: Dict) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å Vinted —á–µ—Ä–µ–∑ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—É"""
        url = "https://www.vinted.de/api/v2/catalog/items"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        params = search_params.copy()
        params["_t"] = int(time.time() * 1000)  # Timestamp
        params["_r"] = random.randint(1000, 9999)  # Random
        
        result, success = await self.smart_request(url, params)
        
        if success and result:
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {len(result.get('items', []))} —Ç–æ–≤–∞—Ä–æ–≤")
            return result
        else:
            logging.error(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Vinted")
            return None
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "total_requests": self.total_requests,
            "total_errors": self.total_errors,
            "total_blocks": self.total_blocks,
            "current_session": self.current_session_index,
            "sessions_count": len(self.sessions),
            "success_rate": (self.total_requests - self.total_errors) / max(self.total_requests, 1) * 100
        }
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.browser:
            await self.browser.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
antiban_system = AdvancedAntiBan() 