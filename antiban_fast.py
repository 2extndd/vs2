#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞
"""

import random
import time
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime
import requests
from fake_useragent import UserAgent

@dataclass
class SessionData:
    """–î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
    headers: Dict
    user_agent: str
    requests_count: int = 0
    errors_count: int = 0
    last_success: float = 0

class FastAntiBan:
    """–ë—ã—Å—Ç—Ä–∞—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.ua = UserAgent()
        self.current_session = self._create_session()
        self.session_rotation_count = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests = 0
        self.total_errors = 0
        self.total_blocks = 0
        self.success_count = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.max_requests_per_session = 50
        self.max_errors_per_session = 10
        self.base_delay = (0.05, 0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        self.error_delay = (0.1, 0.2)  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    def _create_session(self) -> SessionData:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        return SessionData(
            headers=self._generate_headers(),
            user_agent=self.ua.random
        )
    
    def _generate_headers(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        return {
            "User-Agent": self.ua.random,
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "en-US,en;q=0.9,de;q=0.8",
            "Accept-Encoding": "gzip, deflate, br",
            "Referer": "https://www.vinted.de/",
            "Origin": "https://www.vinted.de",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "same-origin",
            "Connection": "keep-alive",
            "Cache-Control": "no-cache"
        }
    
    def _rotate_session(self):
        """–ë—ã—Å—Ç—Ä–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
        self.current_session = self._create_session()
        self.session_rotation_count += 1
        logging.info(f"üîÑ –†–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ #{self.session_rotation_count}")
    
    def _handle_error(self, status_code: int = None):
        """–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.current_session.errors_count += 1
        self.total_errors += 1
        
        # –°—á–∏—Ç–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if status_code in [403, 429, 503, 521]:
            self.total_blocks += 1
            logging.warning(f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ {status_code}")
        
        # –ë—ã—Å—Ç—Ä–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
        if (self.current_session.errors_count >= self.max_errors_per_session or 
            self.current_session.requests_count >= self.max_requests_per_session):
            self._rotate_session()
        
        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        delay = random.uniform(*self.error_delay)
        time.sleep(delay)
    
    def smart_request(self, url: str, params: Dict = None) -> Tuple[Optional[Dict], bool]:
        """–ë—ã—Å—Ç—Ä—ã–π —É–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        try:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            delay = random.uniform(*self.base_delay)
            time.sleep(delay)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.get(
                url,
                params=params,
                headers=self.current_session.headers,
                timeout=10  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç
            )
            
            self.current_session.requests_count += 1
            self.total_requests += 1
            
            if response.status_code == 200:
                self.current_session.last_success = time.time()
                self.success_count += 1
                
                try:
                    data = response.json()
                    return data, True
                except:
                    return {"status": "ok"}, True
                    
            else:
                self._handle_error(response.status_code)
                return None, False
                
        except Exception as e:
            self._handle_error()
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)[:30]}")
            return None, False
    
    def get_vinted_items(self, search_params: Dict) -> Optional[Dict]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å Vinted"""
        url = "https://www.vinted.de/api/v2/catalog/items"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
        params = search_params.copy()
        params["_t"] = int(time.time() * 1000)
        params["_r"] = random.randint(1000, 9999)
        
        result, success = self.smart_request(url, params)
        
        if success and result:
            items_count = len(result.get('items', []))
            logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {items_count} —Ç–æ–≤–∞—Ä–æ–≤")
            return result
        else:
            return None
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "total_requests": self.total_requests,
            "total_errors": self.total_errors,
            "total_blocks": self.total_blocks,
            "success_count": self.success_count,
            "session_rotations": self.session_rotation_count,
            "success_rate": (self.success_count / max(self.total_requests, 1)) * 100
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
fast_antiban_system = FastAntiBan()