#!/usr/bin/env python3
import requests
import Config
import time

def find_working_thread_ids():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–∞–±–æ—á–∏–µ thread_id –¥–ª—è —Ç–æ–ø–∏–∫–æ–≤"""
    url = f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage"
    
    print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö thread_id...")
    print(f"üì± Chat ID: {Config.telegram_chat_id}")
    print(f"ü§ñ Bot Token: {Config.telegram_bot_token[:20]}...")
    print()
    
    working_threads = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 1 –¥–æ 50
    for test_id in range(1, 51):
        params = {
            "chat_id": Config.telegram_chat_id,
            "text": f"üß™ –¢–µ—Å—Ç thread_id {test_id}",
            "message_thread_id": test_id
        }
        
        try:
            response = requests.post(url, data=params, timeout=10)
            
            if response.status_code == 200:
                print(f"‚úÖ Thread {test_id} –†–ê–ë–û–¢–ê–ï–¢!")
                working_threads.append(test_id)
            else:
                error_data = response.json() if response.headers.get('content-type') == 'application/json' else {}
                error_desc = error_data.get('description', 'Unknown error')
                print(f"‚ùå Thread {test_id}: {error_desc}")
                
        except Exception as e:
            print(f"‚ùå Thread {test_id}: Exception - {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å rate limit
        time.sleep(0.3)
    
    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    if working_threads:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ thread_id: {working_threads}")
        print()
        print("üîß –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Config.py –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ thread_id:")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ thread_id –ø–æ —Ç–æ–ø–∏–∫–∞–º
        topic_names = list(Config.topics.keys())
        for i, (topic_name, thread_id) in enumerate(zip(topic_names, working_threads)):
            print(f"'{topic_name}': {{'thread_id': {thread_id}, ...}}")
            if i >= len(working_threads) - 1:  # –ï—Å–ª–∏ thread_id –∫–æ–Ω—á–∏–ª–∏—Å—å
                break
        
        # –ï—Å–ª–∏ —Ç–æ–ø–∏–∫–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö thread_id
        if len(topic_names) > len(working_threads):
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(working_threads)} —Ä–∞–±–æ—á–∏—Ö thread_id, –Ω–æ —É –≤–∞—Å {len(topic_names)} —Ç–æ–ø–∏–∫–æ–≤.")
            print("–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω thread_id –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–ø–∏–∫–æ–≤.")
        
    else:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ thread_id!")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ß–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —Ñ–æ—Ä—É–º")
        print("2. –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–∏")
        print("3. –¢–æ–ø–∏–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ")

if __name__ == "__main__":
    find_working_thread_ids()
