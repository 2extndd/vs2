#!/usr/bin/env python3
"""
üîß –ü–∞—Ç—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PayPal —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π vinted_scanner.py

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ vinted_scanner.py
"""

# ===== –î–û–ë–ê–í–ò–¢–¨ –í –ò–ú–ü–û–†–¢–´ =====
"""
from vinted_paypal_reservation import VintedPayPalReservation, format_reservation_message
"""

# ===== –î–û–ë–ê–í–ò–¢–¨ –í –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
"""
# PayPal Reservation System
paypal_reservation = None
reservation_count_hour = 0
last_reservation_hour = datetime.now().hour
"""

# ===== –î–û–ë–ê–í–ò–¢–¨ –§–£–ù–ö–¶–ò–ò =====

def init_paypal_reservation():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã PayPal —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global paypal_reservation
    
    try:
        if Config.paypal_reservation_enabled:
            # –ü–æ–ª—É—á–∞–µ–º cookies –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            session = requests.Session()
            session.post(Config.vinted_url, headers=headers, timeout=timeoutconnection)
            cookies = session.cookies.get_dict()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            user_agent = headers.get("User-Agent", "Mozilla/5.0")
            paypal_reservation = VintedPayPalReservation(cookies, user_agent)
            
            logging.info("‚úÖ PayPal Reservation System initialized")
        else:
            logging.info("‚è∏Ô∏è PayPal Reservation disabled in config")
            
    except Exception as e:
        logging.error(f"‚ùå Failed to initialize PayPal Reservation: {e}")
        paypal_reservation = None

def should_reserve_item(item_id: str, topic_name: str, item_price: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"""
    global reservation_count_hour, last_reservation_hour
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not Config.paypal_reservation_enabled or not paypal_reservation:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ø–∏–∫ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        if topic_name not in Config.reservation_topics:
            return False
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
        current_hour = datetime.now().hour
        if current_hour != last_reservation_hour:
            reservation_count_hour = 0
            last_reservation_hour = current_hour
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –≤ —á–∞—Å
        if reservation_count_hour >= Config.max_reservations_per_hour:
            logging.warning(f"‚è∞ Reservation limit reached: {reservation_count_hour}/{Config.max_reservations_per_hour}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        try:
            price_value = float(item_price.split()[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if price_value < Config.min_reservation_price or price_value > Config.max_reservation_price:
                logging.info(f"üí∞ Item price {price_value}‚Ç¨ outside reservation range {Config.min_reservation_price}-{Config.max_reservation_price}‚Ç¨")
                return False
        except (ValueError, IndexError):
            logging.warning(f"‚ö†Ô∏è Cannot parse item price: {item_price}")
            return False
        
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Error in should_reserve_item: {e}")
        return False

def send_telegram_reservation_message(message: str, thread_id: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage"
        
        params = {
            "chat_id": Config.telegram_chat_id,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è PayPal —Å—Å—ã–ª–æ–∫
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if thread_id:
            params["message_thread_id"] = thread_id
        
        response = requests.post(url, data=params, timeout=timeoutconnection)
        
        if response.status_code == 200:
            logging.info("‚úÖ Reservation message sent to Telegram")
            return True
        else:
            logging.error(f"‚ùå Failed to send reservation message: {response.status_code}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå Error sending reservation message: {e}")
        return False

# ===== –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø send_telegram_message =====
def enhanced_send_telegram_message(item_title, item_price, item_url, item_image, item_size=None, thread_id=None, item_id=None, topic_name=None):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global reservation_count_hour
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = send_telegram_message(item_title, item_price, item_url, item_image, item_size, thread_id)
    
    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ò –≤–∫–ª—é—á–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
    if success and should_reserve_item(item_id, topic_name, item_price):
        try:
            logging.info(f"üéØ ATTEMPTING RESERVATION: {item_title}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
            reserved, paypal_url, res_id = paypal_reservation.reserve_item(item_id, item_title)
            
            if reserved and paypal_url:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
                reservation_count_hour += 1
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
                expires_at = datetime.now() + timedelta(minutes=15)
                reservation_msg = format_reservation_message(
                    True, paypal_url, res_id, item_title, item_price, expires_at
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
                send_telegram_reservation_message(reservation_msg, thread_id)
                
                logging.info(f"üéâ RESERVATION SUCCESSFUL: {item_title}")
                logging.info(f"üìä Reservations today: {reservation_count_hour}/{Config.max_reservations_per_hour}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
                time.sleep(3)
                
            else:
                logging.warning(f"‚ùå RESERVATION FAILED: {item_title}")
                
        except Exception as e:
            logging.error(f"‚ùå Reservation error for {item_title}: {e}")
    
    return success

# ===== –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

async def reservations_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reservations - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏"""
    try:
        if not paypal_reservation:
            await update.message.reply_text("‚ùå PayPal —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        active_reservations = paypal_reservation.get_active_reservations()
        
        if not active_reservations:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π")
            return
        
        message = "üéØ <b>–ê–ö–¢–ò–í–ù–´–ï –†–ï–ó–ï–†–í–ê–¶–ò–ò:</b>\n\n"
        
        for res_id, info in active_reservations.items():
            expires_in = info['expires_at'] - datetime.now()
            minutes_left = int(expires_in.total_seconds() / 60)
            
            message += f"üì¶ <b>{info['item_title'][:30]}...</b>\n"
            message += f"üí∞ {info['item_price']}\n"
            message += f"üÜî <code>{res_id}</code>\n"
            message += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: <b>{minutes_left} –º–∏–Ω</b>\n"
            message += f"üîó <a href=\"{info['paypal_url']}\">–û–ø–ª–∞—Ç–∏—Ç—å</a>\n\n"
        
        message += f"üìä –†–µ–∑–µ—Ä–≤–∞—Ü–∏–π –∑–∞ —á–∞—Å: {reservation_count_hour}/{Config.max_reservations_per_hour}"
        
        await update.message.reply_text(message, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def cancel_reservation_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - –æ—Ç–º–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: /cancel TXN-123456")
            return
        
        reservation_id = context.args[0]
        
        if not paypal_reservation:
            await update.message.reply_text("‚ùå PayPal —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return
        
        success = paypal_reservation.cancel_reservation(reservation_id)
        
        if success:
            await update.message.reply_text(f"‚úÖ –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è {reservation_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é {reservation_id}")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ===== –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø setup_bot =====
"""
# –í —Ñ—É–Ω–∫—Ü–∏–∏ setup_bot() –¥–æ–±–∞–≤–∏—Ç—å:
application.add_handler(CommandHandler("reservations", reservations_command))
application.add_handler(CommandHandler("cancel", cancel_reservation_command))
"""

# ===== –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø main() =====
"""
# –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –ø–æ—Å–ª–µ load_analyzed_item() –¥–æ–±–∞–≤–∏—Ç—å:
init_paypal_reservation()

# –í scanner_loop() –∑–∞–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤ send_telegram_message –Ω–∞:
enhanced_send_telegram_message(item_title, item_price, item_url, item_image, item_size, thread_id, item_id, topic_name)
"""

if __name__ == "__main__":
    print("ÔøΩÔøΩ PayPal Integration Patch for VintedScanner")
    print("Apply this code to vinted_scanner.py to enable PayPal auto-reservation")
