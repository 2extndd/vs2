#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import sys
import os
import time
import requests
import json
import threading
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import vinted_scanner
import Config

def monitor_bot_status():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print("üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–¢–ê–¢–£–°–ê –ë–û–¢–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    if not Config.telegram_bot_token or not Config.telegram_chat_id:
        print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    base_url = f"https://api.telegram.org/bot{Config.telegram_bot_token}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç—É—Å–∞
    try:
        response = requests.post(
            f"{base_url}/sendMessage",
            data={
                "chat_id": Config.telegram_chat_id,
                "text": "/status",
                "parse_mode": "HTML"
            },
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates_response = requests.get(
                f"{base_url}/getUpdates",
                params={"limit": 10, "timeout": 5},
                timeout=10
            )
            
            if updates_response.status_code == 200:
                updates = updates_response.json()
                if updates.get("ok") and updates.get("result"):
                    for update in updates["result"]:
                        if "message" in update and "text" in update["message"]:
                            text = update["message"]["text"]
                            if "üü¢ Running" in text or "üìä Items:" in text:
                                print("üì§ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ /status:")
                                print(text)
                                return True
                
                print("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /status")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates_response.status_code}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    return False

def test_system_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    print(f"\nüîÑ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ù–´–• –ö–û–ú–ê–ù–î")
    print("=" * 60)
    
    if not Config.telegram_bot_token or not Config.telegram_chat_id:
        print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    base_url = f"https://api.telegram.org/bot{Config.telegram_bot_token}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    test_commands = [
        ("/fast", "–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º"),
        ("/slow", "–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"),
        ("/reset", "—Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã"),
        ("/system auto", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"),
        ("/recovery", "—Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
    ]
    
    for command, description in test_commands:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description} ({command})")
        
        try:
            response = requests.post(
                f"{base_url}/sendMessage",
                data={
                    "chat_id": Config.telegram_chat_id,
                    "text": command,
                    "parse_mode": "HTML"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                time.sleep(2)
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
        
        time.sleep(1)

def test_recovery_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print(f"\nüîÑ –¢–ï–°–¢ –ö–û–ú–ê–ù–î –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    if not Config.telegram_bot_token or not Config.telegram_chat_id:
        print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    base_url = f"https://api.telegram.org/bot{Config.telegram_bot_token}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    recovery_commands = [
        ("/recovery test", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"),
        ("/recovery reset", "—Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã"),
        ("/recovery force_advanced", "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é"),
        ("/recovery force_noproxy", "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏")
    ]
    
    for command, description in recovery_commands:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description} ({command})")
        
        try:
            response = requests.post(
                f"{base_url}/sendMessage",
                data={
                    "chat_id": Config.telegram_chat_id,
                    "text": command,
                    "parse_mode": "HTML"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                time.sleep(3)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è recovery –∫–æ–º–∞–Ω–¥
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
        
        time.sleep(2)

def test_advanced_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    print(f"\nüîÑ –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–´–• –ö–û–ú–ê–ù–î")
    print("=" * 60)
    
    if not Config.telegram_bot_token or not Config.telegram_chat_id:
        print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    base_url = f"https://api.telegram.org/bot{Config.telegram_bot_token}"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    advanced_commands = [
        ("/proxy", "—Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏"),
        ("/traffic", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞"),
        ("/topics", "—Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤"),
        ("/threadid", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ thread ID"),
        ("/detect", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ thread ID")
    ]
    
    for command, description in advanced_commands:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description} ({command})")
        
        try:
            response = requests.post(
                f"{base_url}/sendMessage",
                data={
                    "chat_id": Config.telegram_chat_id,
                    "text": command,
                    "parse_mode": "HTML"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                time.sleep(2)
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
        
        time.sleep(1)

def monitor_logs():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"\nüìù –ú–û–ù–ò–¢–û–†–ò–ù–ì –õ–û–ì–û–í –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    log_file = "vinted_scanner.log"
    
    if not os.path.exists(log_file):
        print(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        return
    
    print(f"üìÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞: {log_file}")
    print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    try:
        with open(log_file, "r", encoding="utf-8") as f:
            f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            initial_size = f.tell()
        
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: {initial_size} –±–∞–π—Ç")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        for i in range(10):  # 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            time.sleep(2)
            
            try:
                with open(log_file, "r", encoding="utf-8") as f:
                    f.seek(0, 2)
                    current_size = f.tell()
                
                if current_size > initial_size:
                    print(f"üìù –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–µ (–∏—Ç–µ—Ä–∞—Ü–∏—è {i+1})")
                    
                    # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                    with open(log_file, "r", encoding="utf-8") as f:
                        f.seek(initial_size)
                        new_lines = f.readlines()
                        
                    for line in new_lines:
                        print(f"   {line.strip()}")
                    
                    initial_size = current_size
                else:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π... (–∏—Ç–µ—Ä–∞—Ü–∏—è {i+1})")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")

def test_system_switching_real_time():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"\nüîÑ –¢–ï–°–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    original_system = vinted_scanner.current_system
    original_system_mode = vinted_scanner.system_mode
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   current_system: {vinted_scanner.current_system}")
    print(f"   system_mode: {vinted_scanner.system_mode}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    test_scenarios = [
        ("basic -> advanced_no_proxy", "basic", 3, "basic_system_errors"),
        ("advanced_no_proxy -> advanced_proxy", "advanced_no_proxy", 3, "advanced_no_proxy_errors"),
        ("advanced_proxy -> advanced_no_proxy", "advanced_proxy", 3, "advanced_proxy_errors")
    ]
    
    for scenario_name, system, error_count, error_attr in test_scenarios:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_name}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        vinted_scanner.current_system = system
        setattr(vinted_scanner, error_attr, error_count)
        vinted_scanner.last_switch_time = time.time()
        
        print(f"   –î–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:")
        print(f"   - current_system: {vinted_scanner.current_system}")
        print(f"   - {error_attr}: {getattr(vinted_scanner, error_attr)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        result = vinted_scanner.should_switch_system()
        
        print(f"   –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"   - current_system: {vinted_scanner.current_system}")
        print(f"   - {error_attr}: {getattr(vinted_scanner, error_attr)}")
        
        if result:
            print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"   ‚ùå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    vinted_scanner.current_system = original_system
    vinted_scanner.system_mode = original_system_mode
    
    print(f"\n‚úÖ –¢–ï–°–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú –ó–ê–í–ï–†–®–ï–ù")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –†–ê–ë–û–¢–´ –ë–û–¢–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
    monitor_bot_status()
    
    # –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    test_system_commands()
    
    # –¢–µ—Å—Ç 3: –ö–æ–º–∞–Ω–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    test_recovery_commands()
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    test_advanced_commands()
    
    # –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
    test_system_switching_real_time()
    
    # –¢–µ—Å—Ç 6: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
    monitor_logs()
    
    print(f"\nüéØ –¢–ï–°–¢ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üõ°Ô∏è –í–°–ï –°–ò–°–¢–ï–ú–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")
    print(f"‚úÖ –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –°–¢–ê–ë–ò–õ–¨–ù–û!")

if __name__ == "__main__":
    main() 