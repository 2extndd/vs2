#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
"""

import time
import requests
from antiban_fast import fast_antiban_system

def production_speed_test():
    """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    print("üöÄ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_params = {
        'page': '1',
        'per_page': '2',
        'order': 'newest_first'
    }
    
    print("\n‚ö° –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ (10 –∑–∞–ø—Ä–æ—Å–æ–≤):")
    
    start_time = time.time()
    success_count = 0
    
    for i in range(10):
        try:
            result = fast_antiban_system.smart_request(
                "https://httpbin.org/json",  # –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                test_params
            )
            if result[1]:  # success
                success_count += 1
                print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: —É—Å–ø–µ—Ö")
            else:
                print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –ø—Ä–æ–≤–∞–ª")
        except Exception as e:
            print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –æ—à–∏–±–∫–∞")
    
    end_time = time.time()
    total_time = end_time - start_time
    
    stats = fast_antiban_system.get_stats()
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –°–ö–û–†–û–°–¢–ò:")
    print(f"  –í—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {10/total_time:.2f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}/10")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%")
    
    # –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if total_time < 15 and success_count >= 8:
        print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        print(f"  –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞: {10/total_time:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        print(f"  –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {success_count}/10 —É—Å–ø–µ—à–Ω—ã—Ö")
        return True
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
        if total_time >= 15:
            print(f"  –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ: {total_time:.1f}s (–Ω—É–∂–Ω–æ <15s)")
        if success_count < 8:
            print(f"  –ù–∏–∑–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {success_count}/10 (–Ω—É–∂–Ω–æ >=8)")
        return False

if __name__ == "__main__":
    production_speed_test()