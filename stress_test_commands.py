#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import sys
import os
import time
import requests
import json
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import vinted_scanner
import Config

def test_telegram_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Telegram API"""
    print("üì± –ü–û–õ–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ TELEGRAM –ö–û–ú–ê–ù–î")
    print("=" * 60)
    
    if not Config.telegram_bot_token or not Config.telegram_chat_id:
        print("‚ùå Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    
    base_url = f"https://api.telegram.org/bot{Config.telegram_bot_token}"
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    commands = [
        "/status",
        "/log", 
        "/fast",
        "/slow",
        "/reset",
        "/system auto",
        "/system basic",
        "/system advanced",
        "/system proxy",
        "/system noproxy",
        "/recovery",
        "/recovery test",
        "/recovery reset",
        "/recovery force_proxy",
        "/recovery force_noproxy",
        "/recovery force_advanced",
        "/proxy",
        "/traffic",
        "/topics",
        "/threadid",
        "/detect"
    ]
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(commands)} –∫–æ–º–∞–Ω–¥...")
    
    for i, command in enumerate(commands, 1):
        print(f"\nüîÑ –¢–ï–°–¢ {i}/{len(commands)}: {command}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            response = requests.post(
                f"{base_url}/sendMessage",
                data={
                    "chat_id": Config.telegram_chat_id,
                    "text": command,
                    "parse_mode": "HTML"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {command}")
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
                time.sleep(2)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                updates_response = requests.get(
                    f"{base_url}/getUpdates",
                    params={"limit": 5, "timeout": 5},
                    timeout=10
                )
                
                if updates_response.status_code == 200:
                    updates = updates_response.json()
                    if updates.get("ok") and updates.get("result"):
                        latest_message = updates["result"][-1]
                        if "message" in latest_message and "text" in latest_message["message"]:
                            bot_response = latest_message["message"]["text"]
                            print(f"   üì§ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {bot_response[:100]}...")
                        else:
                            print(f"   ‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates_response.status_code}")
                    
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {str(e)[:50]}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        time.sleep(1)
    
    print(f"\n‚úÖ –°–¢–†–ï–°–°-–¢–ï–°–¢ –ö–û–ú–ê–ù–î –ó–ê–í–ï–†–®–ï–ù")

def test_system_switching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º"""
    print(f"\nüîÑ –¢–ï–°–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú")
    print("=" * 60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    original_system = vinted_scanner.current_system
    original_system_mode = vinted_scanner.system_mode
    
    print(f"üìä –ò–°–•–û–î–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    print(f"   current_system: {vinted_scanner.current_system}")
    print(f"   system_mode: {vinted_scanner.system_mode}")
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    test_modes = ["auto", "basic", "advanced", "proxy", "noproxy"]
    
    for mode in test_modes:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∂–∏–º: {mode}")
        vinted_scanner.system_mode = mode
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        if mode == "basic":
            vinted_scanner.current_system = "basic"
            vinted_scanner.basic_system_errors = 3
            vinted_scanner.last_switch_time = time.time()
            
            result = vinted_scanner.should_switch_system()
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
            print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
            
        elif mode == "advanced":
            vinted_scanner.current_system = "advanced_no_proxy"
            vinted_scanner.advanced_no_proxy_errors = 3
            vinted_scanner.last_switch_time = time.time()
            
            result = vinted_scanner.should_switch_system()
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
            print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
            
        elif mode == "proxy":
            vinted_scanner.current_system = "advanced_proxy"
            vinted_scanner.advanced_proxy_errors = 3
            vinted_scanner.last_switch_time = time.time()
            
            result = vinted_scanner.should_switch_system()
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
            print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    vinted_scanner.current_system = original_system
    vinted_scanner.system_mode = original_system_mode
    
    print(f"\n‚úÖ –¢–ï–°–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ò–°–¢–ï–ú –ó–ê–í–ï–†–®–ï–ù")

def test_statistics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    print(f"\nüìä –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print(f"üìà –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã...")
    
    for i in range(10):
        system = "basic" if i % 3 == 0 else "advanced_no_proxy" if i % 3 == 1 else "advanced_proxy"
        success = i % 4 != 0  # 75% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        
        vinted_scanner.update_system_stats(system, success)
        print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {system} - {'‚úÖ' if success else '‚ùå'}")
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {vinted_scanner.basic_requests}")
    print(f"   –ë–∞–∑–æ–≤—ã–µ —É—Å–ø–µ—Ö–∏: {vinted_scanner.basic_success}")
    print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å—ã: {vinted_scanner.advanced_no_proxy_requests}")
    print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—Ö–∏: {vinted_scanner.advanced_no_proxy_success}")
    print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å—ã: {vinted_scanner.advanced_proxy_requests}")
    print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—Ö–∏: {vinted_scanner.advanced_proxy_success}")
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    total_requests = (vinted_scanner.basic_requests + 
                     vinted_scanner.advanced_no_proxy_requests + 
                     vinted_scanner.advanced_proxy_requests)
    total_success = (vinted_scanner.basic_success + 
                    vinted_scanner.advanced_no_proxy_success + 
                    vinted_scanner.advanced_proxy_success)
    
    if total_requests > 0:
        success_rate = (total_success / total_requests) * 100
        print(f"   –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\n‚úÖ –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù")

def test_recovery_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print(f"\nüîÑ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
    print(f"üìä –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è...")
    
    vinted_scanner.basic_system_errors = 15
    vinted_scanner.advanced_no_proxy_errors = 10
    vinted_scanner.advanced_proxy_errors = 5
    vinted_scanner.telegram_antiblock.consecutive_errors = 15
    vinted_scanner.telegram_antiblock.error_backoff = 10
    
    print(f"   –î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
    print(f"   - basic_system_errors: {vinted_scanner.basic_system_errors}")
    print(f"   - advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
    print(f"   - advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
    print(f"   - telegram_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
    print(f"   - telegram_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    vinted_scanner.auto_recovery_system()
    
    print(f"\n   –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
    print(f"   - basic_system_errors: {vinted_scanner.basic_system_errors}")
    print(f"   - advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
    print(f"   - advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
    print(f"   - telegram_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
    print(f"   - telegram_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
    print(f"   - current_system: {vinted_scanner.current_system}")
    
    print(f"\n‚úÖ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù")

def test_telegram_errors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ Telegram"""
    print(f"\nüì± –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö TELEGRAM")
    print("=" * 60)
    
    print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
    print(f"   error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    error_types = ["429", "conflict", "getUpdates", "network", "timeout"]
    
    for error_type in error_types:
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É: {error_type}")
        vinted_scanner.telegram_antiblock.handle_telegram_error(error_type)
        
        print(f"   –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   - consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   - error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
    
    # –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    print(f"\nüîÑ –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    vinted_scanner.telegram_antiblock.handle_telegram_error("success")
    
    print(f"   –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:")
    print(f"   - consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
    print(f"   - error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
    
    print(f"\n‚úÖ –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö TELEGRAM –ó–ê–í–ï–†–®–ï–ù")

def test_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏"""
    print(f"\nüìù –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í")
    print("=" * 60)
    
    log_file = "vinted_scanner.log"
    
    if os.path.exists(log_file):
        print(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {log_file}")
        
        try:
            with open(log_file, "r", encoding="utf-8") as f:
                lines = f.readlines()
                
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:")
            print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-50:] if len(lines) > 50 else lines
            
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_lines)} —Å—Ç—Ä–æ–∫:")
            for i, line in enumerate(recent_lines, 1):
                print(f"   {i:2d}: {line.strip()}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
    
    print(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ó–ê–í–ï–†–®–ï–ù")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –í–°–ï–• –°–ò–°–¢–ï–ú")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ö–æ–º–∞–Ω–¥—ã Telegram
    test_telegram_commands()
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
    test_system_switching()
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    test_statistics()
    
    # –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    test_recovery_system()
    
    # –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
    test_telegram_errors()
    
    # –¢–µ—Å—Ç 6: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    test_logs()
    
    print(f"\nüéØ –ü–û–õ–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üõ°Ô∏è –í–°–ï –°–ò–°–¢–ï–ú–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!")
    print(f"‚úÖ –ë–û–¢ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")

if __name__ == "__main__":
    main() 