#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Vinted Scanner
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Å Vinted API
"""

import sys
import time
import asyncio
import threading
import random
import json
from datetime import datetime
sys.path.append('.')

import Config
from advanced_antiban import get_advanced_system
import vinted_scanner

class VintedStressTest:
    def __init__(self):
        self.advanced_system = get_advanced_system()
        self.results = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'errors_403': 0,
            'errors_429': 0,
            'errors_401': 0,
            'other_errors': 0,
            'items_found': 0,
            'response_times': [],
            'proxy_rotations': 0
        }
        
    def test_single_request(self, topic_name, params):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        
        try:
            print(f"üîç –¢–µ—Å—Ç: {topic_name}")
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            # HTTP –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É
            url = f"{Config.vinted_url}/api/v2/catalog/items"
            result = self.advanced_system.make_http_request(url, params)
            
            response_time = time.time() - start_time
            self.results['response_times'].append(response_time)
            
            if result:
                items = result.get('items', [])
                self.results['successful_requests'] += 1
                self.results['items_found'] += len(items)
                
                print(f"‚úÖ –£–°–ü–ï–•: {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {response_time:.2f}s")
                if items:
                    for i, item in enumerate(items[:2], 1):
                        title = item.get('title', 'N/A')
                        price = item.get('price', {})
                        amount = price.get('amount', 'N/A')
                        currency = price.get('currency_code', '')
                        print(f"   {i}. {title} - {amount} {currency}")
            else:
                self.results['failed_requests'] += 1
                print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {response_time:.2f}s")
                
        except Exception as e:
            self.results['failed_requests'] += 1
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            
        self.results['total_requests'] += 1
        
    def test_concurrent_requests(self, num_requests=10):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"\nüöÄ –°–¢–†–ï–°–°-–¢–ï–°–¢: {num_requests} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("=" * 60)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_params = [
            {
                'name': 'Prada',
                'params': {
                    'page': '1', 'per_page': '2', 'search_text': '',
                    'catalog_ids': '2050,1231,82', 'brand_ids': '3573',
                    'order': 'newest_first', 'price_to': '80'
                }
            },
            {
                'name': 'bags',
                'params': {
                    'page': '1', 'per_page': '2', 'search_text': '',
                    'catalog_ids': '', 'brand_ids': '212366',
                    'order': 'newest_first', 'price_to': '45'
                }
            },
            {
                'name': 'Alexander Wang',
                'params': {
                    'page': '1', 'per_page': '2', 'search_text': 'Leather',
                    'catalog_ids': '94', 'brand_ids': '28327',
                    'order': 'newest_first', 'price_to': '90'
                }
            }
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        for i in range(num_requests):
            test_case = random.choice(test_params)
            self.test_single_request(test_case['name'], test_case['params'])
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < num_requests - 1:
                delay = random.uniform(1, 3)
                print(f"‚è±Ô∏è –ü–∞—É–∑–∞ {delay:.1f}s...")
                time.sleep(delay)
                
    def test_proxy_rotation(self):
        """–¢–µ—Å—Ç —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        print(f"\nüîÑ –¢–ï–°–¢ –†–û–¢–ê–¶–ò–ò –ü–†–û–ö–°–ò")
        print("=" * 40)
        
        initial_proxy = self.advanced_system.current_proxy
        if initial_proxy:
            print(f"üì° –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏: {initial_proxy['host']}:{initial_proxy['port']}")
        else:
            print("üì° –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        for i in range(5):
            old_proxy = self.advanced_system.current_proxy
            self.advanced_system._rotate_proxy()
            new_proxy = self.advanced_system.current_proxy
            
            if old_proxy != new_proxy:
                if new_proxy:
                    print(f"‚úÖ –†–æ—Ç–∞—Ü–∏—è {i+1}: {new_proxy['host']}:{new_proxy['port']}")
                else:
                    print(f"‚úÖ –†–æ—Ç–∞—Ü–∏—è {i+1}: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω")
                self.results['proxy_rotations'] += 1
            else:
                if new_proxy:
                    print(f"‚ö†Ô∏è –†–æ—Ç–∞—Ü–∏—è {i+1}: –¢–æ—Ç –∂–µ –ø—Ä–æ–∫—Å–∏ {new_proxy['host']}:{new_proxy['port']}")
                else:
                    print(f"‚ö†Ô∏è –†–æ—Ç–∞—Ü–∏—è {i+1}: –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω")
                
    def test_error_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        print(f"\nüö® –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        print("=" * 40)
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        invalid_params = {
            'page': '999', 'per_page': '999', 'search_text': 'INVALID_TEST',
            'catalog_ids': '999999', 'brand_ids': '999999',
            'order': 'newest_first', 'price_to': '999999'
        }
        
        print("üîç –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        self.test_single_request("INVALID_TEST", invalid_params)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
        stats = self.advanced_system.get_stats()
        print(f"üìä –û—à–∏–±–∫–∏ 403: {stats['errors_403']}")
        print(f"üìä –û—à–∏–±–∫–∏ 429: {stats['errors_429']}")
        print(f"üìä –û—à–∏–±–∫–∏ 521: {stats['errors_521']}")
        
    def test_system_stability(self, duration=60):
        """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print(f"\nüõ°Ô∏è –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò ({duration}s)")
        print("=" * 40)
        
        start_time = time.time()
        requests_made = 0
        
        while time.time() - start_time < duration:
            try:
                # –°–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                params = {
                    'page': '1', 'per_page': '2', 'search_text': '',
                    'catalog_ids': '', 'brand_ids': '212366',
                    'order': 'newest_first', 'price_to': '45'
                }
                
                self.test_single_request("STABILITY_TEST", params)
                requests_made += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(random.uniform(2, 5))
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
                
        print(f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {duration}s: {requests_made}")
        
    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–ê")
        print("=" * 50)
        
        total = self.results['total_requests']
        success = self.results['successful_requests']
        failed = self.results['failed_requests']
        
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success/total*100):.1f}%" if total > 0 else "üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0%")
        
        if self.results['response_times']:
            avg_time = sum(self.results['response_times']) / len(self.results['response_times'])
            min_time = min(self.results['response_times'])
            max_time = max(self.results['response_times'])
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s")
            print(f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f}s")
            print(f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f}s")
            
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.results['items_found']}")
        print(f"üîÑ –†–æ—Ç–∞—Ü–∏–π –ø—Ä–æ–∫—Å–∏: {self.results['proxy_rotations']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã
        stats = self.advanced_system.get_stats()
        print(f"\nüöÄ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´:")
        print(f"   üìä HTTP –∑–∞–ø—Ä–æ—Å—ã: {stats['http_success']}/{stats['http_requests']}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")
        print(f"   üì° –ü—Ä–æ–∫—Å–∏: {stats['proxies_count']} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        print(f"   ‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {stats['consecutive_errors']}")
        print(f"   üîÑ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏: {stats['current_proxy']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        if stats.get('proxy_stats'):
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ö–°–ò:")
            for proxy, proxy_stat in stats['proxy_stats'].items():
                print(f"   ‚Ä¢ {proxy}: {proxy_stat['success']}/{proxy_stat['requests']} ({proxy_stat['success_rate']:.1f}%)")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞"""
    print("üß™ –°–¢–†–ï–°–°-–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ VINTED SCANNER")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    stress_test = VintedStressTest()
    
    try:
        # –¢–µ—Å—Ç 1: –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        stress_test.test_proxy_rotation()
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        stress_test.test_concurrent_requests(num_requests=15)
        
        # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        stress_test.test_error_handling()
        
        # –¢–µ—Å—Ç 4: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (30 —Å–µ–∫—É–Ω–¥)
        stress_test.test_system_stability(duration=30)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        stress_test.print_results()
        
        print(f"\n‚úÖ –°–¢–†–ï–°–°-–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        stress_test.print_results()
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 