#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã Vinted Scanner (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)
"""

import sys
import time
import requests
import random
from datetime import datetime
sys.path.append('.')

import Config
import vinted_scanner

class BasicSystemTest:
    def __init__(self):
        self.results = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'errors_403': 0,
            'errors_429': 0,
            'errors_401': 0,
            'other_errors': 0,
            'items_found': 0,
            'response_times': []
        }
        
    def test_basic_request(self, topic_name, params):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        start_time = time.time()
        
        try:
            print(f"üîç –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç: {topic_name}")
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = requests.Session()
            
            # –ü–æ–ª—É—á–∞–µ–º cookies —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            headers = vinted_scanner.vinted_antiblock.get_headers()
            main_response = session.get(Config.vinted_url, headers=headers, timeout=30)
            cookies = session.cookies.get_dict()
            print(f"üç™ Cookies –ø–æ–ª—É—á–µ–Ω—ã: {len(cookies)}")
            
            if len(cookies) == 0:
                print("‚ö†Ô∏è Cookies –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è cookies
                session.post(Config.vinted_url, headers=headers, timeout=30)
                cookies = session.cookies.get_dict()
                print(f"üç™ Cookies –ø–æ—Å–ª–µ POST: {len(cookies)}")
            
            # HTTP –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            url = f"{Config.vinted_url}/api/v2/catalog/items"
            response = session.get(
                url,
                params=params,
                headers=headers,
                cookies=cookies,
                timeout=30
            )
            
            response_time = time.time() - start_time
            self.results['response_times'].append(response_time)
            
            print(f"üìä HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', [])
                self.results['successful_requests'] += 1
                self.results['items_found'] += len(items)
                
                print(f"‚úÖ –£–°–ü–ï–•: {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {response_time:.2f}s")
                if items:
                    for i, item in enumerate(items[:3], 1):
                        title = item.get('title', 'N/A')
                        price = item.get('price', {})
                        amount = price.get('amount', 'N/A')
                        currency = price.get('currency_code', '')
                        brand = item.get('brand_title', 'N/A')
                        print(f"   {i}. {title}")
                        print(f"      üí∞ {amount} {currency}")
                        print(f"      üè∑Ô∏è {brand}")
            elif response.status_code == 403:
                self.results['errors_403'] += 1
                self.results['failed_requests'] += 1
                print(f"‚ùå HTTP 403 Forbidden –∑–∞ {response_time:.2f}s")
            elif response.status_code == 429:
                self.results['errors_429'] += 1
                self.results['failed_requests'] += 1
                print(f"‚ùå HTTP 429 Too Many Requests –∑–∞ {response_time:.2f}s")
            elif response.status_code == 401:
                self.results['errors_401'] += 1
                self.results['failed_requests'] += 1
                print(f"‚ùå HTTP 401 Unauthorized –∑–∞ {response_time:.2f}s")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text[:200]}")
            else:
                self.results['other_errors'] += 1
                self.results['failed_requests'] += 1
                print(f"‚ùå HTTP {response.status_code} –∑–∞ {response_time:.2f}s")
                
        except Exception as e:
            self.results['failed_requests'] += 1
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            
        self.results['total_requests'] += 1
        
    def test_multiple_requests(self):
        """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"\nüöÄ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –°–ò–°–¢–ï–ú–´ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)")
        print("=" * 50)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cases = [
            {
                'name': 'Prada',
                'params': {
                    'page': '1', 'per_page': '2', 'search_text': '',
                    'catalog_ids': '2050,1231,82', 'brand_ids': '3573',
                    'order': 'newest_first', 'price_to': '80'
                }
            },
            {
                'name': 'bags',
                'params': {
                    'page': '1', 'per_page': '2', 'search_text': '',
                    'catalog_ids': '', 'brand_ids': '212366',
                    'order': 'newest_first', 'price_to': '45'
                }
            },
            {
                'name': 'Alexander Wang',
                'params': {
                    'page': '1', 'per_page': '2', 'search_text': 'Leather',
                    'catalog_ids': '94', 'brand_ids': '28327',
                    'order': 'newest_first', 'price_to': '90'
                }
            }
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n--- –¢–µ—Å—Ç {i}/{len(test_cases)} ---")
            self.test_basic_request(test_case['name'], test_case['params'])
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(test_cases):
                delay = random.uniform(3, 5)
                print(f"‚è±Ô∏è –ü–∞—É–∑–∞ {delay:.1f}s...")
                time.sleep(delay)
                
    def print_results(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ê–ó–û–í–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 40)
        
        total = self.results['total_requests']
        success = self.results['successful_requests']
        failed = self.results['failed_requests']
        
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success/total*100):.1f}%" if total > 0 else "üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0%")
        
        if self.results['response_times']:
            avg_time = sum(self.results['response_times']) / len(self.results['response_times'])
            min_time = min(self.results['response_times'])
            max_time = max(self.results['response_times'])
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f}s")
            print(f"‚è±Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f}s")
            print(f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f}s")
            
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {self.results['items_found']}")
        print(f"üö´ –û—à–∏–±–∫–∏ 403: {self.results['errors_403']}")
        print(f"üö´ –û—à–∏–±–∫–∏ 429: {self.results['errors_429']}")
        print(f"üö´ –û—à–∏–±–∫–∏ 401: {self.results['errors_401']}")
        print(f"üö´ –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: {self.results['other_errors']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –°–ò–°–¢–ï–ú–´ VINTED SCANNER")
    print("=" * 50)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    basic_test = BasicSystemTest()
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        basic_test.test_multiple_requests()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        basic_test.print_results()
        
        print(f"\n‚úÖ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üïê –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        basic_test.print_results()
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 