#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from advanced_antiban import get_advanced_system

def test_complete_logic():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
    system = get_advanced_system()
    
    print("\nüìä –¢–ï–°–¢ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)")
    print("-" * 40)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    system.proxy_mode = "auto"
    system.http_requests = 0
    system.http_success = 0
    system.errors_403 = 0
    system.errors_429 = 0
    system.errors_521 = 0
    system.consecutive_errors = 0
    
    print(f"üîß –†–µ–∂–∏–º: {system.proxy_mode}")
    print(f"üìä –ó–∞–ø—Ä–æ—Å—ã: {system.http_requests}")
    print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {system.http_success}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º _should_use_proxy
    should_use = system._should_use_proxy()
    print(f"üîç –î–æ–ª–∂–µ–Ω –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {should_use}")
    
    print("\nüìä –¢–ï–°–¢ 2: –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    print("-" * 40)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    system.http_requests = 20
    system.http_success = 18  # 90% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    system.errors_403 = 1
    system.consecutive_errors = 0
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å={system.http_success/system.http_requests*100:.1f}%, –æ—à–∏–±–æ–∫=1")
    
    should_use = system._should_use_proxy()
    print(f"üîç –î–æ–ª–∂–µ–Ω –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {should_use}")
    
    print("\nüìä –¢–ï–°–¢ 3: –ü—Ä–æ–±–ª–µ–º—ã - –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏")
    print("-" * 40)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    system.http_requests = 10
    system.http_success = 5  # 50% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    system.errors_403 = 3
    system.errors_429 = 1
    system.consecutive_errors = 3
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å={system.http_success/system.http_requests*100:.1f}%, –æ—à–∏–±–æ–∫=4, –ø–æ–¥—Ä—è–¥=3")
    
    should_use = system._should_use_proxy()
    print(f"üîç –î–æ–ª–∂–µ–Ω –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏: {should_use}")
    
    print("\nüìä –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    print("-" * 40)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–∫—Å–∏
    system.proxy_mode = "enabled"
    system.http_requests = 30
    system.http_success = 27  # 90% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    system.errors_403 = 2
    system.consecutive_errors = 0
    system.no_proxy_test_attempts = 0
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø—Ä–æ–∫—Å–∏: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å={system.http_success/system.http_requests*100:.1f}%, –æ—à–∏–±–æ–∫=2")
    print(f"üîß –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏: {system.proxy_mode}")
    print(f"üìà –ü–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {system.no_proxy_test_attempts}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    system.last_proxy_switch_time = time.time() - 700
    
    # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    system._check_no_proxy_workability()
    
    print(f"üìä –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"üîß –†–µ–∂–∏–º –ø—Ä–æ–∫—Å–∏: {system.proxy_mode}")
    print(f"üìà –ü–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {system.no_proxy_test_attempts}")
    
    print("\nüìä –¢–ï–°–¢ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = system.get_stats()
    
    print("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for key, value in stats.items():
        if isinstance(value, (int, float)):
            print(f"   {key}: {value}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    test_complete_logic() 