#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Vinted Scanner
"""

import sys
import os
import time
import json
import unittest
from unittest.mock import Mock, patch, MagicMock
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import vinted_scanner
import Config

class TestVintedScanner(unittest.TestCase):
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã Vinted Scanner"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.original_scan_mode = vinted_scanner.scan_mode
        self.original_system_mode = vinted_scanner.system_mode
        self.original_current_system = vinted_scanner.current_system
        self.original_basic_errors = vinted_scanner.basic_system_errors
        self.original_advanced_no_proxy_errors = vinted_scanner.advanced_no_proxy_errors
        self.original_advanced_proxy_errors = vinted_scanner.advanced_proxy_errors
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        vinted_scanner.basic_system_errors = 0
        vinted_scanner.advanced_no_proxy_errors = 0
        vinted_scanner.advanced_proxy_errors = 0
        vinted_scanner.last_switch_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramAntiBlock –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(vinted_scanner, 'telegram_antiblock'):
            vinted_scanner.telegram_antiblock = vinted_scanner.TelegramAntiBlock()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        vinted_scanner.scan_mode = self.original_scan_mode
        vinted_scanner.system_mode = self.original_system_mode
        vinted_scanner.current_system = self.original_current_system
        vinted_scanner.basic_system_errors = self.original_basic_errors
        vinted_scanner.advanced_no_proxy_errors = self.original_advanced_no_proxy_errors
        vinted_scanner.advanced_proxy_errors = self.original_advanced_proxy_errors
    
    def test_1_basic_system_switching(self):
        """–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüîÑ –¢–ï–°–¢ 1: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        vinted_scanner.current_system = "basic"
        vinted_scanner.basic_system_errors = 0
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        for i in range(3):
            vinted_scanner.basic_system_errors += 1
            print(f"   –û—à–∏–±–∫–∞ {i+1}: basic_system_errors = {vinted_scanner.basic_system_errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        result = vinted_scanner.should_switch_system()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
        print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.assertTrue(result)
        self.assertEqual(vinted_scanner.current_system, "advanced_no_proxy")
        self.assertEqual(vinted_scanner.basic_system_errors, 0)
    
    def test_2_advanced_system_switching(self):
        """–¢–µ—Å—Ç 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüîÑ –¢–ï–°–¢ 2: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        vinted_scanner.current_system = "advanced_no_proxy"
        vinted_scanner.advanced_no_proxy_errors = 0
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        for i in range(3):
            vinted_scanner.advanced_no_proxy_errors += 1
            print(f"   –û—à–∏–±–∫–∞ {i+1}: advanced_no_proxy_errors = {vinted_scanner.advanced_no_proxy_errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        result = vinted_scanner.should_switch_system()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
        print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.assertTrue(result)
        self.assertEqual(vinted_scanner.current_system, "advanced_proxy")
        self.assertEqual(vinted_scanner.advanced_no_proxy_errors, 0)
    
    def test_3_proxy_system_switching(self):
        """–¢–µ—Å—Ç 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüîÑ –¢–ï–°–¢ 3: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å –ø—Ä–æ–∫—Å–∏
        vinted_scanner.current_system = "advanced_proxy"
        vinted_scanner.advanced_proxy_errors = 0
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        for i in range(3):
            vinted_scanner.advanced_proxy_errors += 1
            print(f"   –û—à–∏–±–∫–∞ {i+1}: advanced_proxy_errors = {vinted_scanner.advanced_proxy_errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        result = vinted_scanner.should_switch_system()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
        print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.assertTrue(result)
        self.assertEqual(vinted_scanner.current_system, "advanced_no_proxy")
        self.assertEqual(vinted_scanner.advanced_proxy_errors, 0)
    
    def test_4_time_based_switching(self):
        """–¢–µ—Å—Ç 4: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        print("\nüîÑ –¢–ï–°–¢ 4: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –¥–∞–≤–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        vinted_scanner.current_system = "basic"
        vinted_scanner.last_switch_time = time.time() - 301  # 5 –º–∏–Ω—É—Ç + 1 —Å–µ–∫—É–Ω–¥–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        result = vinted_scanner.should_switch_system()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {result}")
        print(f"   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.assertTrue(result)
        self.assertEqual(vinted_scanner.current_system, "advanced_no_proxy")
    
    def test_5_scan_mode_switching(self):
        """–¢–µ—Å—Ç 5: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüîÑ –¢–ï–°–¢ 5: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç fast —Ä–µ–∂–∏–º–∞
        vinted_scanner.scan_mode = "fast"
        self.assertEqual(vinted_scanner.scan_mode, "fast")
        print(f"   ‚úÖ Fast —Ä–µ–∂–∏–º: {vinted_scanner.scan_mode}")
        
        # –¢–µ—Å—Ç slow —Ä–µ–∂–∏–º–∞
        vinted_scanner.scan_mode = "slow"
        self.assertEqual(vinted_scanner.scan_mode, "slow")
        print(f"   ‚úÖ Slow —Ä–µ–∂–∏–º: {vinted_scanner.scan_mode}")
    
    def test_6_system_mode_switching(self):
        """–¢–µ—Å—Ç 6: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüîÑ –¢–ï–°–¢ 6: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
        
        test_modes = ["auto", "basic", "advanced", "proxy", "noproxy"]
        
        for mode in test_modes:
            vinted_scanner.system_mode = mode
            self.assertEqual(vinted_scanner.system_mode, mode)
            print(f"   ‚úÖ –†–µ–∂–∏–º {mode}: {vinted_scanner.system_mode}")
    
    def test_7_statistics_tracking(self):
        """–¢–µ—Å—Ç 7: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("\nüìä –¢–ï–°–¢ 7: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
        systems = ["basic", "advanced_no_proxy", "advanced_proxy"]
        
        for i, system in enumerate(systems):
            success = i % 2 == 0  # –ß–µ—Ä–µ–¥—É–µ–º —É—Å–ø–µ—Ö–∏ –∏ –Ω–µ—É–¥–∞—á–∏
            vinted_scanner.update_system_stats(system, success)
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: {system} - {'‚úÖ' if success else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"   üìä –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {vinted_scanner.basic_requests}")
        print(f"   üìä –ë–∞–∑–æ–≤—ã–µ —É—Å–ø–µ—Ö–∏: {vinted_scanner.basic_success}")
        print(f"   üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å—ã: {vinted_scanner.advanced_no_proxy_requests}")
        print(f"   üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—Ö–∏: {vinted_scanner.advanced_no_proxy_success}")
        print(f"   üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å—ã: {vinted_scanner.advanced_proxy_requests}")
        print(f"   üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—Ö–∏: {vinted_scanner.advanced_proxy_success}")
        
        self.assertGreater(vinted_scanner.basic_requests, 0)
        self.assertGreater(vinted_scanner.advanced_no_proxy_requests, 0)
        self.assertGreater(vinted_scanner.advanced_proxy_requests, 0)
    
    def test_8_telegram_error_handling(self):
        """–¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        print("\nüì± –¢–ï–°–¢ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        original_errors = vinted_scanner.telegram_antiblock.consecutive_errors
        original_backoff = vinted_scanner.telegram_antiblock.error_backoff
        
        print(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   - consecutive_errors: {original_errors}")
        print(f"   - error_backoff: {original_backoff}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        error_types = ["429", "conflict", "getUpdates"]
        
        for error_type in error_types:
            vinted_scanner.telegram_antiblock.handle_telegram_error(error_type)
            print(f"   –ü–æ—Å–ª–µ {error_type}: consecutive_errors = {vinted_scanner.telegram_antiblock.consecutive_errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
        self.assertGreater(vinted_scanner.telegram_antiblock.consecutive_errors, original_errors)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        vinted_scanner.telegram_antiblock.handle_telegram_error("success")
        print(f"   –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: consecutive_errors = {vinted_scanner.telegram_antiblock.consecutive_errors}")
        
        self.assertEqual(vinted_scanner.telegram_antiblock.consecutive_errors, 0)
    
    def test_9_auto_recovery_system(self):
        """–¢–µ—Å—Ç 9: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        print("\nüîÑ –¢–ï–°–¢ 9: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        vinted_scanner.basic_system_errors = 15
        vinted_scanner.advanced_no_proxy_errors = 10
        vinted_scanner.advanced_proxy_errors = 5
        vinted_scanner.telegram_antiblock.consecutive_errors = 15
        vinted_scanner.telegram_antiblock.error_backoff = 10
        
        print(f"   üìä –î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   - basic_system_errors: {vinted_scanner.basic_system_errors}")
        print(f"   - advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
        print(f"   - advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
        print(f"   - telegram_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        vinted_scanner.auto_recovery_system()
        
        print(f"   üìä –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   - basic_system_errors: {vinted_scanner.basic_system_errors}")
        print(f"   - advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
        print(f"   - advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
        print(f"   - telegram_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   - current_system: {vinted_scanner.current_system}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
        self.assertEqual(vinted_scanner.basic_system_errors, 0)
        self.assertEqual(vinted_scanner.advanced_no_proxy_errors, 0)
        self.assertEqual(vinted_scanner.advanced_proxy_errors, 0)
        self.assertEqual(vinted_scanner.telegram_antiblock.consecutive_errors, 0)
        self.assertEqual(vinted_scanner.telegram_antiblock.error_backoff, 1)
    
    def test_10_command_handlers(self):
        """–¢–µ—Å—Ç 10: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
        print("\nüìã –¢–ï–°–¢ 10: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            "status_command", "log_command", "restart_command",
            "fast_command", "slow_command", "reset_command",
            "proxy_command", "system_command", "recovery_command",
            "traffic_command", "topics_command", "threadid_command",
            "detect_threadid_command"
        ]
        
        for handler_name in handlers:
            handler = getattr(vinted_scanner, handler_name, None)
            if handler:
                print(f"   ‚úÖ {handler_name} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                self.assertIsNotNone(handler)
            else:
                print(f"   ‚ùå {handler_name} - –ù–ï –ù–ê–ô–î–ï–ù")
                self.fail(f"Handler {handler_name} not found")

def run_main_tests():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üéØ –û–°–ù–û–í–ù–´–ï –¢–ï–°–¢–´ VINTED SCANNER")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    suite = unittest.TestLoader().loadTestsFromTestCase(TestVintedScanner)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: {len(result.failures)}")
    print(f"   ‚ö†Ô∏è –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"   üìä –í—Å–µ–≥–æ: {result.testsRun}")
    
    if result.wasSuccessful():
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    run_main_tests() 