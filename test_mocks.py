#!/usr/bin/env python3
"""
–ú–æ–∫–∏ –¥–ª—è Vinted –∏ Telegram –æ—Ç–≤–µ—Ç–æ–≤
"""

import sys
import os
import time
import json
import requests
from unittest.mock import Mock, patch, MagicMock
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import vinted_scanner
import Config

class MockResponses:
    """–ú–æ–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def mock_vinted_success():
        """–ú–æ–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Vinted"""
        return {
            "items": [
                {
                    "id": 12345678,
                    "title": "Test Item 1",
                    "price": {"amount": "25.0", "currency_code": "EUR"},
                    "is_visible": True,
                    "brand_title": "Test Brand",
                    "path": "/items/12345678-test-item-1"
                },
                {
                    "id": 87654321,
                    "title": "Test Item 2", 
                    "price": {"amount": "35.0", "currency_code": "EUR"},
                    "is_visible": True,
                    "brand_title": "Test Brand 2",
                    "path": "/items/87654321-test-item-2"
                }
            ],
            "pagination": {
                "current_page": 1,
                "per_page": 2,
                "total_count": 100
            }
        }
    
    @staticmethod
    def mock_vinted_429():
        """–ú–æ–∫ –æ—à–∏–±–∫–∏ 429 –æ—Ç Vinted"""
        return Mock(
            status_code=429,
            text="Too Many Requests",
            json=lambda: {"error": "Rate limit exceeded"}
        )
    
    @staticmethod
    def mock_vinted_403():
        """–ú–æ–∫ –æ—à–∏–±–∫–∏ 403 –æ—Ç Vinted"""
        return Mock(
            status_code=403,
            text="Forbidden",
            json=lambda: {"error": "Access denied"}
        )
    
    @staticmethod
    def mock_vinted_521():
        """–ú–æ–∫ –æ—à–∏–±–∫–∏ 521 –æ—Ç Vinted"""
        return Mock(
            status_code=521,
            text="Web server is down",
            json=lambda: {"error": "Server error"}
        )
    
    @staticmethod
    def mock_telegram_success():
        """–ú–æ–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Telegram"""
        return Mock(
            status_code=200,
            json=lambda: {"ok": True, "result": {"message_id": 123}}
        )
    
    @staticmethod
    def mock_telegram_429():
        """–ú–æ–∫ –æ—à–∏–±–∫–∏ 429 –æ—Ç Telegram"""
        return Mock(
            status_code=429,
            json=lambda: {"ok": False, "error_code": 429, "description": "Too Many Requests"}
        )
    
    @staticmethod
    def mock_telegram_conflict():
        """–ú–æ–∫ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ç Telegram"""
        return Mock(
            status_code=409,
            json=lambda: {"ok": False, "error_code": 409, "description": "Conflict"}
        )

class MockTestVintedScanner:
    """–¢–µ—Å—Ç—ã —Å –º–æ–∫–∞–º–∏ –¥–ª—è Vinted Scanner"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
        self.test_results = []
        self.start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.original_scan_mode = vinted_scanner.scan_mode
        self.original_system_mode = vinted_scanner.system_mode
        self.original_current_system = vinted_scanner.current_system
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        vinted_scanner.basic_system_errors = 0
        vinted_scanner.advanced_no_proxy_errors = 0
        vinted_scanner.advanced_proxy_errors = 0
        vinted_scanner.last_switch_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramAntiBlock
        if not hasattr(vinted_scanner, 'telegram_antiblock'):
            vinted_scanner.telegram_antiblock = vinted_scanner.TelegramAntiBlock()
    
    def reset_system(self):
        """–°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        vinted_scanner.scan_mode = self.original_scan_mode
        vinted_scanner.system_mode = self.original_system_mode
        vinted_scanner.current_system = self.original_current_system
        vinted_scanner.basic_system_errors = 0
        vinted_scanner.advanced_no_proxy_errors = 0
        vinted_scanner.advanced_proxy_errors = 0
        vinted_scanner.telegram_antiblock.consecutive_errors = 0
        vinted_scanner.telegram_antiblock.error_backoff = 1
    
    def test_1_vinted_429_error_handling(self):
        """–¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 –æ—Ç Vinted"""
        print("\nüåê –¢–ï–°–¢ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 –æ—Ç Vinted")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "basic"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   basic_system_errors: {vinted_scanner.basic_system_errors}")
        
        # –ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Vinted —Å –æ—à–∏–±–∫–æ–π 429
        with patch('requests.get') as mock_get:
            mock_get.return_value = MockResponses.mock_vinted_429()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                response = requests.get("https://www.vinted.de/api/v2/catalog/items")
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
                vinted_scanner.basic_system_errors += 1
                print(f"   ‚ùå –û—à–∏–±–∫–∞ 429 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (basic_system_errors = {vinted_scanner.basic_system_errors})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                if vinted_scanner.should_switch_system():
                    print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {vinted_scanner.current_system}")
                    success = True
                else:
                    print(f"   ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ")
                    success = False
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "vinted_429_error_handling",
            "final_system": vinted_scanner.current_system,
            "success": success
        })
        
        return success
    
    def test_2_vinted_403_error_handling(self):
        """–¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 –æ—Ç Vinted"""
        print("\nüåê –¢–ï–°–¢ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 –æ—Ç Vinted")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "advanced_no_proxy"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
        
        # –ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Vinted —Å –æ—à–∏–±–∫–æ–π 403
        with patch('requests.get') as mock_get:
            mock_get.return_value = MockResponses.mock_vinted_403()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                response = requests.get("https://www.vinted.de/api/v2/catalog/items")
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
                vinted_scanner.advanced_no_proxy_errors += 1
                print(f"   ‚ùå –û—à–∏–±–∫–∞ 403 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (advanced_no_proxy_errors = {vinted_scanner.advanced_no_proxy_errors})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                if vinted_scanner.should_switch_system():
                    print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {vinted_scanner.current_system}")
                    success = True
                else:
                    print(f"   ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ")
                    success = False
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "vinted_403_error_handling",
            "final_system": vinted_scanner.current_system,
            "success": success
        })
        
        return success
    
    def test_3_vinted_521_error_handling(self):
        """–¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 521 –æ—Ç Vinted"""
        print("\nüåê –¢–ï–°–¢ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 521 –æ—Ç Vinted")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "advanced_proxy"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
        
        # –ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Vinted —Å –æ—à–∏–±–∫–æ–π 521
        with patch('requests.get') as mock_get:
            mock_get.return_value = MockResponses.mock_vinted_521()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                response = requests.get("https://www.vinted.de/api/v2/catalog/items")
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
                vinted_scanner.advanced_proxy_errors += 1
                print(f"   ‚ùå –û—à–∏–±–∫–∞ 521 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (advanced_proxy_errors = {vinted_scanner.advanced_proxy_errors})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                if vinted_scanner.should_switch_system():
                    print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {vinted_scanner.current_system}")
                    success = True
                else:
                    print(f"   ‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ")
                    success = False
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "vinted_521_error_handling",
            "final_system": vinted_scanner.current_system,
            "success": success
        })
        
        return success
    
    def test_4_telegram_429_error_handling(self):
        """–¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 –æ—Ç Telegram"""
        print("\nüì± –¢–ï–°–¢ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 –æ—Ç Telegram")
        print("=" * 60)
        
        self.reset_system()
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram:")
        print(f"   consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
        
        # –ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram —Å –æ—à–∏–±–∫–æ–π 429
        with patch('requests.post') as mock_post:
            mock_post.return_value = MockResponses.mock_telegram_429()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                response = requests.post(
                    f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage",
                    data={"chat_id": Config.telegram_chat_id, "text": "Test message"}
                )
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Telegram: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
                vinted_scanner.telegram_antiblock.handle_telegram_error("429")
                print(f"   ‚ùå –û—à–∏–±–∫–∞ 429 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (consecutive_errors = {vinted_scanner.telegram_antiblock.consecutive_errors})")
                
                success = vinted_scanner.telegram_antiblock.consecutive_errors > 0
                
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "telegram_429_error_handling",
            "consecutive_errors": vinted_scanner.telegram_antiblock.consecutive_errors,
            "success": success
        })
        
        return success
    
    def test_5_telegram_conflict_error_handling(self):
        """–¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ç Telegram"""
        print("\nüì± –¢–ï–°–¢ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ç Telegram")
        print("=" * 60)
        
        self.reset_system()
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram:")
        print(f"   consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
        
        # –ú–æ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram —Å –æ—à–∏–±–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        with patch('requests.post') as mock_post:
            mock_post.return_value = MockResponses.mock_telegram_conflict()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                response = requests.post(
                    f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage",
                    data={"chat_id": Config.telegram_chat_id, "text": "Test message"}
                )
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Telegram: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
                vinted_scanner.telegram_antiblock.handle_telegram_error("conflict")
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (consecutive_errors = {vinted_scanner.telegram_antiblock.consecutive_errors})")
                
                success = vinted_scanner.telegram_antiblock.consecutive_errors > 0
                
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "telegram_conflict_error_handling",
            "consecutive_errors": vinted_scanner.telegram_antiblock.consecutive_errors,
            "success": success
        })
        
        return success
    
    def test_6_telegram_success_handling(self):
        """–¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram"""
        print("\nüì± –¢–ï–°–¢ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram")
        print("=" * 60)
        
        self.reset_system()
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫–∏
        vinted_scanner.telegram_antiblock.consecutive_errors = 5
        vinted_scanner.telegram_antiblock.error_backoff = 10
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram:")
        print(f"   consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
        
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Telegram
        with patch('requests.post') as mock_post:
            mock_post.return_value = MockResponses.mock_telegram_success()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                response = requests.post(
                    f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendMessage",
                    data={"chat_id": Config.telegram_chat_id, "text": "Test message"}
                )
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Telegram: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—Ö–∞
                vinted_scanner.telegram_antiblock.handle_telegram_error("success")
                print(f"   ‚úÖ –£—Å–ø–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω (consecutive_errors = {vinted_scanner.telegram_antiblock.consecutive_errors})")
                
                success = (vinted_scanner.telegram_antiblock.consecutive_errors == 0 and 
                          vinted_scanner.telegram_antiblock.error_backoff == 1)
                
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "telegram_success_handling",
            "consecutive_errors": vinted_scanner.telegram_antiblock.consecutive_errors,
            "error_backoff": vinted_scanner.telegram_antiblock.error_backoff,
            "success": success
        })
        
        return success
    
    def test_7_vinted_success_handling(self):
        """–¢–µ—Å—Ç 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Vinted"""
        print("\nüåê –¢–ï–°–¢ 7: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Vinted")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "basic"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   basic_system_errors: {vinted_scanner.basic_system_errors}")
        
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Vinted
        with patch('requests.get') as mock_get:
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = MockResponses.mock_vinted_success()
            mock_get.return_value = mock_response
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            try:
                response = requests.get("https://www.vinted.de/api/v2/catalog/items")
                print(f"   üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—Ö–∞
                vinted_scanner.update_system_stats("basic", True)
                print(f"   ‚úÖ –£—Å–ø–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω (basic_success = {vinted_scanner.basic_success})")
                
                success = vinted_scanner.basic_success > 0
                
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                success = False
        
        self.test_results.append({
            "test": "vinted_success_handling",
            "basic_success": vinted_scanner.basic_success,
            "success": success
        })
        
        return success
    
    def test_8_retry_mechanism(self):
        """–¢–µ—Å—Ç 8: –ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        print("\nüîÑ –¢–ï–°–¢ 8: –ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
        print("=" * 60)
        
        self.reset_system()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ä–∏—é –æ—à–∏–±–æ–∫ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —É—Å–ø–µ—Ö–æ–º
        error_responses = [
            MockResponses.mock_vinted_429(),
            MockResponses.mock_vinted_403(),
            MockResponses.mock_vinted_521(),
            Mock()  # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        ]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = MockResponses.mock_vinted_success()
        error_responses[3] = mock_response
        
        with patch('requests.get') as mock_get:
            mock_get.side_effect = error_responses
            
            retry_count = 0
            max_retries = 3
            
            for attempt in range(max_retries + 1):
                try:
                    response = requests.get("https://www.vinted.de/api/v2/catalog/items")
                    print(f"   üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –°—Ç–∞—Ç—É—Å {response.status_code}")
                    
                    if response.status_code == 200:
                        print(f"   ‚úÖ –£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        retry_count = attempt + 1
                        break
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        retry_count = attempt + 1
                        
                except Exception as e:
                    print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    retry_count = attempt + 1
            
            success = retry_count <= max_retries + 1
        
        self.test_results.append({
            "test": "retry_mechanism",
            "retry_count": retry_count,
            "max_retries": max_retries,
            "success": success
        })
        
        return success
    
    def run_all_mock_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∞–º–∏"""
        print("üé≠ –¢–ï–°–¢–´ –° –ú–û–ö–ê–ú–ò VINTED SCANNER")
        print("=" * 60)
        
        tests = [
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 –æ—Ç Vinted", self.test_1_vinted_429_error_handling),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 403 –æ—Ç Vinted", self.test_2_vinted_403_error_handling),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 521 –æ—Ç Vinted", self.test_3_vinted_521_error_handling),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 429 –æ—Ç Telegram", self.test_4_telegram_429_error_handling),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –æ—Ç Telegram", self.test_5_telegram_conflict_error_handling),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram", self.test_6_telegram_success_handling),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Vinted", self.test_7_vinted_success_handling),
            ("–ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", self.test_8_retry_mechanism)
        ]
        
        successful_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                print(f"\nüîÑ –ó–∞–ø—É—Å–∫: {test_name}")
                if test_func():
                    successful_tests += 1
                    print(f"   ‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
                else:
                    print(f"   ‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {test_name}: –û–®–ò–ë–ö–ê - {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        end_time = time.time()
        duration = end_time - self.start_time
        
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í –° –ú–û–ö–ê–ú–ò:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_tests/total_tests)*100:.1f}%")
        
        if successful_tests == total_tests:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –° –ú–û–ö–ê–ú–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –° –ú–û–ö–ê–ú–ò –ü–†–û–í–ê–õ–ï–ù–´!")
        
        return successful_tests == total_tests

def run_mock_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–æ–∫–∞–º–∏"""
    tester = MockTestVintedScanner()
    return tester.run_all_mock_tests()

if __name__ == "__main__":
    run_mock_tests() 