#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º Vinted
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏, –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
"""

import time
import logging
import requests
import json
from advanced_antiban import get_advanced_system
import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def test_basic_vs_advanced_mode():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –±–∞–∑–æ–≤—ã–º –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ä–µ–∂–∏–º–æ–º"""
    print("üîÑ –¢–ï–°–¢: –ë–ê–ó–û–í–´–ô VS –ü–†–û–î–í–ò–ù–£–¢–´–ô –†–ï–ñ–ò–ú")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
    advanced_system = get_advanced_system()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Vinted
    test_params = {
        "search_text": "nike",
        "catalog_ids": "",
        "color_ids": "",
        "brand_ids": "",
        "size_ids": "",
        "material_ids": "",
        "status_ids": "",
        "country_ids": "",
        "city_ids": "",
        "is_for_swap": "0",
        "price_from": "",
        "price_to": "",
        "currency": "EUR"
    }
    
    url = f"{Config.vinted_url}/api/v2/catalog/items"
    
    print(f"üåê URL: {url}")
    print(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_params}")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    print(f"\nüìä –¢–ï–°–¢ 1: –ë–ê–ó–û–í–´–ô –†–ï–ñ–ò–ú")
    print("-" * 40)
    
    basic_success = 0
    basic_requests = 3
    
    for i in range(basic_requests):
        print(f"üîÑ –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{basic_requests}:")
        
        try:
            # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Accept": "application/json, text/plain, */*",
                "Accept-Language": "en-US,en;q=0.9",
                "DNT": "1",
                "Connection": "keep-alive"
            }
            
            response = requests.get(url, params=test_params, headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                items_count = len(data.get('items', []))
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count}")
                basic_success += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        time.sleep(2)
    
    basic_success_rate = (basic_success / basic_requests * 100) if basic_requests > 0 else 0
    print(f"üìä –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º: {basic_success}/{basic_requests} ({basic_success_rate:.1f}%)")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º
    print(f"\nüìä –¢–ï–°–¢ 2: –ü–†–û–î–í–ò–ù–£–¢–´–ô –†–ï–ñ–ò–ú")
    print("-" * 40)
    
    advanced_success = 0
    advanced_requests = 3
    
    for i in range(advanced_requests):
        print(f"üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∑–∞–ø—Ä–æ—Å {i+1}/{advanced_requests}:")
        
        try:
            result = advanced_system.make_http_request(url, test_params)
            
            if result:
                items_count = len(result.get('items', []))
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count}")
                advanced_success += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        time.sleep(2)
    
    advanced_success_rate = (advanced_success / advanced_requests * 100) if advanced_requests > 0 else 0
    print(f"üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: {advanced_success}/{advanced_requests} ({advanced_success_rate:.1f}%)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í:")
    print(f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π: {basic_success_rate:.1f}%")
    print(f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: {advanced_success_rate:.1f}%")
    
    return basic_success_rate, advanced_success_rate

def test_proxy_vs_noproxy_mode():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø—Ä–æ–∫—Å–∏ –∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º —Ä–µ–∂–∏–º–µ"""
    print(f"\nüîÑ –¢–ï–°–¢: –ü–†–û–ö–°–ò VS –ë–ï–ó –ü–†–û–ö–°–ò")
    print("=" * 60)
    
    advanced_system = get_advanced_system()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    test_params = {
        "search_text": "adidas",
        "catalog_ids": "",
        "color_ids": "",
        "brand_ids": "",
        "size_ids": "",
        "material_ids": "",
        "status_ids": "",
        "country_ids": "",
        "city_ids": "",
        "is_for_swap": "0",
        "price_from": "",
        "price_to": "",
        "currency": "EUR"
    }
    
    url = f"{Config.vinted_url}/api/v2/catalog/items"
    
    # –¢–µ—Å—Ç 1: –†–µ–∂–∏–º —Å –ø—Ä–æ–∫—Å–∏
    print(f"\nüìä –¢–ï–°–¢ 1: –†–ï–ñ–ò–ú –° –ü–†–û–ö–°–ò")
    print("-" * 40)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    advanced_system.proxy_mode = "enabled"
    advanced_system._rotate_proxy()
    
    proxy_success = 0
    proxy_requests = 3
    
    for i in range(proxy_requests):
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–∫—Å–∏ {i+1}/{proxy_requests}:")
        
        try:
            result = advanced_system.make_http_request(url, test_params)
            
            if result:
                items_count = len(result.get('items', []))
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count}")
                proxy_success += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        time.sleep(2)
    
    proxy_success_rate = (proxy_success / proxy_requests * 100) if proxy_requests > 0 else 0
    print(f"üìä –†–µ–∂–∏–º —Å –ø—Ä–æ–∫—Å–∏: {proxy_success}/{proxy_requests} ({proxy_success_rate:.1f}%)")
    
    # –¢–µ—Å—Ç 2: –†–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    print(f"\nüìä –¢–ï–°–¢ 2: –†–ï–ñ–ò–ú –ë–ï–ó –ü–†–û–ö–°–ò")
    print("-" * 40)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    advanced_system.proxy_mode = "disabled"
    advanced_system.current_proxy = None
    
    noproxy_success = 0
    noproxy_requests = 3
    
    for i in range(noproxy_requests):
        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–∫—Å–∏ {i+1}/{noproxy_requests}:")
        
        try:
            result = advanced_system.make_http_request(url, test_params)
            
            if result:
                items_count = len(result.get('items', []))
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count}")
                noproxy_success += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        time.sleep(2)
    
    noproxy_success_rate = (noproxy_success / noproxy_requests * 100) if noproxy_requests > 0 else 0
    print(f"üìä –†–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {noproxy_success}/{noproxy_requests} ({noproxy_success_rate:.1f}%)")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í –ü–†–û–ö–°–ò:")
    print(f"‚Ä¢ –° –ø—Ä–æ–∫—Å–∏: {proxy_success_rate:.1f}%")
    print(f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏: {noproxy_success_rate:.1f}%")
    
    return proxy_success_rate, noproxy_success_rate

def test_proxy_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏"""
    print(f"\nüîÑ –¢–ï–°–¢: –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ü–†–û–ö–°–ò")
    print("=" * 60)
    
    advanced_system = get_advanced_system()
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏...")
    
    working_proxies = []
    failed_proxies = []
    
    for i, proxy in enumerate(advanced_system.proxies):
        print(f"üîÑ –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ {i+1}/{len(advanced_system.proxies)}: {proxy['host']}:{proxy['port']}")
        
        if advanced_system._test_proxy(proxy):
            working_proxies.append(f"{proxy['host']}:{proxy['port']}")
            if proxy not in advanced_system.proxy_whitelist:
                advanced_system.proxy_whitelist.append(proxy)
            print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç")
        else:
            failed_proxies.append(f"{proxy['host']}:{proxy['port']}")
            if proxy not in advanced_system.proxy_blacklist:
                advanced_system.proxy_blacklist.append(proxy)
            print(f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        time.sleep(1)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ü–†–û–ö–°–ò:")
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(working_proxies)}")
    print(f"‚ùå –ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {len(failed_proxies)}")
    print(f"üìã Whitelist: {len(advanced_system.proxy_whitelist)}")
    print(f"üö´ Blacklist: {len(advanced_system.proxy_blacklist)}")
    
    if working_proxies:
        print(f"\n‚úÖ –†–ê–ë–û–ß–ò–ï –ü–†–û–ö–°–ò:")
        for proxy in working_proxies[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"‚Ä¢ {proxy}")
    
    if failed_proxies:
        print(f"\n‚ùå –ù–ï–ò–°–ü–†–ê–í–ù–´–ï –ü–†–û–ö–°–ò:")
        for proxy in failed_proxies[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"‚Ä¢ {proxy}")
    
    return len(working_proxies), len(failed_proxies)

def test_different_search_queries():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    print(f"\nüîÑ –¢–ï–°–¢: –†–ê–ó–ù–´–ï –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´")
    print("=" * 60)
    
    advanced_system = get_advanced_system()
    
    # –†–∞–∑–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    search_queries = [
        {"search_text": "nike", "description": "Nike —Ç–æ–≤–∞—Ä—ã"},
        {"search_text": "adidas", "description": "Adidas —Ç–æ–≤–∞—Ä—ã"},
        {"search_text": "bags", "description": "–°—É–º–∫–∏"},
        {"search_text": "shoes", "description": "–û–±—É–≤—å"},
        {"search_text": "dress", "description": "–ü–ª–∞—Ç—å—è"}
    ]
    
    results = {}
    
    for query in search_queries:
        print(f"\nüîç –ü–æ–∏—Å–∫: {query['description']} ('{query['search_text']}')")
        print("-" * 40)
        
        test_params = {
            "search_text": query['search_text'],
            "catalog_ids": "",
            "color_ids": "",
            "brand_ids": "",
            "size_ids": "",
            "material_ids": "",
            "status_ids": "",
            "country_ids": "",
            "city_ids": "",
            "is_for_swap": "0",
            "price_from": "",
            "price_to": "",
            "currency": "EUR"
        }
        
        url = f"{Config.vinted_url}/api/v2/catalog/items"
        
        try:
            result = advanced_system.make_http_request(url, test_params)
            
            if result:
                items_count = len(result.get('items', []))
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                if items_count > 0:
                    print(f"üìã –ü–ï–†–í–´–ï –¢–û–í–ê–†–´:")
                    for i, item in enumerate(result['items'][:3]):
                        title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        price = item.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                        print(f"  {i+1}. {title} - {price}")
                
                results[query['search_text']] = {
                    'success': True,
                    'items_count': items_count
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                results[query['search_text']] = {
                    'success': False,
                    'items_count': 0
                }
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results[query['search_text']] = {
                'success': False,
                'items_count': 0
            }
        
        time.sleep(3)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê:")
    total_success = 0
    total_items = 0
    
    for query, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {query}: {result['items_count']} —Ç–æ–≤–∞—Ä–æ–≤")
        if result['success']:
            total_success += 1
            total_items += result['items_count']
    
    success_rate = (total_success / len(search_queries) * 100) if search_queries else 0
    print(f"\nüìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_items}")
    
    return results

def test_auto_mode_switching():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤"""
    print(f"\nüîÑ –¢–ï–°–¢: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í")
    print("=" * 60)
    
    advanced_system = get_advanced_system()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    advanced_system.proxy_mode = "auto"
    
    print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {advanced_system.proxy_mode}")
    print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–∫—Å–∏: {advanced_system._should_use_proxy()}")
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
    test_params = {
        "search_text": "test",
        "catalog_ids": "",
        "color_ids": "",
        "brand_ids": "",
        "size_ids": "",
        "material_ids": "",
        "status_ids": "",
        "country_ids": "",
        "city_ids": "",
        "is_for_swap": "0",
        "price_from": "",
        "price_to": "",
        "currency": "EUR"
    }
    
    url = f"{Config.vinted_url}/api/v2/catalog/items"
    
    mode_changes = []
    
    for i in range(5):
        print(f"\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å {i+1}/5:")
        
        initial_mode = advanced_system.proxy_mode
        initial_use_proxy = advanced_system._should_use_proxy()
        
        try:
            result = advanced_system.make_http_request(url, test_params)
            
            final_mode = advanced_system.proxy_mode
            final_use_proxy = advanced_system._should_use_proxy()
            
            if initial_mode != final_mode or initial_use_proxy != final_use_proxy:
                mode_changes.append({
                    'request': i+1,
                    'initial_mode': initial_mode,
                    'final_mode': final_mode,
                    'initial_use_proxy': initial_use_proxy,
                    'final_use_proxy': final_use_proxy
                })
                print(f"üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê!")
                print(f"  –ë—ã–ª–æ: {initial_mode} (–ø—Ä–æ–∫—Å–∏: {initial_use_proxy})")
                print(f"  –°—Ç–∞–ª–æ: {final_mode} (–ø—Ä–æ–∫—Å–∏: {final_use_proxy})")
            else:
                print(f"üìä –†–µ–∂–∏–º –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {final_mode} (–ø—Ä–æ–∫—Å–∏: {final_use_proxy})")
            
            if result:
                items_count = len(result.get('items', []))
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {items_count}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        time.sleep(3)
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ô:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {len(mode_changes)}")
    
    for change in mode_changes:
        print(f"‚Ä¢ –ó–∞–ø—Ä–æ—Å {change['request']}: {change['initial_mode']} ‚Üí {change['final_mode']}")
    
    return mode_changes

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ù–ê –†–ï–ê–õ–¨–ù–û–ú VINTED")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π vs –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º
        basic_rate, advanced_rate = test_basic_vs_advanced_mode()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–∫—Å–∏ vs –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        proxy_rate, noproxy_rate = test_proxy_vs_noproxy_mode()
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏
        working_proxies, failed_proxies = test_proxy_health()
        
        # –¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        search_results = test_different_search_queries()
        
        # –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        mode_changes = test_auto_mode_switching()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        print(f"üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í:")
        print(f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π: {basic_rate:.1f}%")
        print(f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π: {advanced_rate:.1f}%")
        
        print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ö–°–ò:")
        print(f"‚Ä¢ –° –ø—Ä–æ–∫—Å–∏: {proxy_rate:.1f}%")
        print(f"‚Ä¢ –ë–µ–∑ –ø—Ä–æ–∫—Å–∏: {noproxy_rate:.1f}%")
        
        print(f"\nüìä –ü–†–û–ö–°–ò:")
        print(f"‚Ä¢ –†–∞–±–æ—á–∏—Ö: {working_proxies}")
        print(f"‚Ä¢ –ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö: {failed_proxies}")
        
        print(f"\nüìä –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´:")
        successful_searches = sum(1 for result in search_results.values() if result['success'])
        total_searches = len(search_results)
        search_success_rate = (successful_searches / total_searches * 100) if total_searches > 0 else 0
        print(f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_searches}/{total_searches} ({search_success_rate:.1f}%)")
        
        print(f"\nüìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø:")
        print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {len(mode_changes)}")
        
        print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")

if __name__ == "__main__":
    main() 