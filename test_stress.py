#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –¥–ª—è Vinted Scanner
"""

import sys
import os
import time
import threading
import concurrent.futures
from unittest.mock import Mock, patch, MagicMock
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import vinted_scanner
import Config

class StressTestVintedScanner:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã Vinted Scanner"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"""
        self.test_results = []
        self.start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.original_scan_mode = vinted_scanner.scan_mode
        self.original_system_mode = vinted_scanner.system_mode
        self.original_current_system = vinted_scanner.current_system
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        vinted_scanner.basic_system_errors = 0
        vinted_scanner.advanced_no_proxy_errors = 0
        vinted_scanner.advanced_proxy_errors = 0
        vinted_scanner.last_switch_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramAntiBlock
        if not hasattr(vinted_scanner, 'telegram_antiblock'):
            vinted_scanner.telegram_antiblock = vinted_scanner.TelegramAntiBlock()
    
    def reset_system(self):
        """–°–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        vinted_scanner.scan_mode = self.original_scan_mode
        vinted_scanner.system_mode = self.original_system_mode
        vinted_scanner.current_system = self.original_current_system
        vinted_scanner.basic_system_errors = 0
        vinted_scanner.advanced_no_proxy_errors = 0
        vinted_scanner.advanced_proxy_errors = 0
        vinted_scanner.telegram_antiblock.consecutive_errors = 0
        vinted_scanner.telegram_antiblock.error_backoff = 1
    
    def test_1_basic_system_stress(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "basic"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   basic_system_errors: {vinted_scanner.basic_system_errors}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 50+ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        total_requests = 50
        successful_switches = 0
        
        for i in range(total_requests):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–∞–∂–¥—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞
            if i % 3 == 0:
                vinted_scanner.basic_system_errors += 1
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ (basic_system_errors = {vinted_scanner.basic_system_errors})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
                if vinted_scanner.should_switch_system():
                    successful_switches += 1
                    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ {successful_switches}: {vinted_scanner.current_system}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                    vinted_scanner.basic_system_errors = 0
            else:
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –£—Å–ø–µ—Ö")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"   üîÑ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {successful_switches}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.test_results.append({
            "test": "basic_system_stress",
            "total_requests": total_requests,
            "successful_switches": successful_switches,
            "final_system": vinted_scanner.current_system,
            "success": successful_switches > 0
        })
        
        return successful_switches > 0
    
    def test_2_advanced_system_stress(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢ 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "advanced_no_proxy"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 50+ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        total_requests = 50
        successful_switches = 0
        
        for i in range(total_requests):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–∞–∂–¥—ã–µ 4 –∑–∞–ø—Ä–æ—Å–∞
            if i % 4 == 0:
                vinted_scanner.advanced_no_proxy_errors += 1
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ (advanced_no_proxy_errors = {vinted_scanner.advanced_no_proxy_errors})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
                if vinted_scanner.should_switch_system():
                    successful_switches += 1
                    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ {successful_switches}: {vinted_scanner.current_system}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                    vinted_scanner.advanced_no_proxy_errors = 0
            else:
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –£—Å–ø–µ—Ö")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"   üîÑ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {successful_switches}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.test_results.append({
            "test": "advanced_system_stress",
            "total_requests": total_requests,
            "successful_switches": successful_switches,
            "final_system": vinted_scanner.current_system,
            "success": successful_switches > 0
        })
        
        return successful_switches > 0
    
    def test_3_proxy_system_stress(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç 3: –ü—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢ 3: –ü—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        print("=" * 60)
        
        self.reset_system()
        vinted_scanner.current_system = "advanced_proxy"
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   current_system: {vinted_scanner.current_system}")
        print(f"   advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 50+ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        total_requests = 50
        successful_switches = 0
        
        for i in range(total_requests):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
            if i % 5 == 0:
                vinted_scanner.advanced_proxy_errors += 1
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ (advanced_proxy_errors = {vinted_scanner.advanced_proxy_errors})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
                if vinted_scanner.should_switch_system():
                    successful_switches += 1
                    print(f"   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ {successful_switches}: {vinted_scanner.current_system}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                    vinted_scanner.advanced_proxy_errors = 0
            else:
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –£—Å–ø–µ—Ö")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"   üîÑ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {successful_switches}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.test_results.append({
            "test": "proxy_system_stress",
            "total_requests": total_requests,
            "successful_switches": successful_switches,
            "final_system": vinted_scanner.current_system,
            "success": successful_switches > 0
        })
        
        return successful_switches > 0
    
    def test_4_concurrent_stress(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç 4: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        print("\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢ 4: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        print("=" * 60)
        
        self.reset_system()
        
        def simulate_request(request_id):
            """–°–∏–º—É–ª—è—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
            try:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –æ—à–∏–±–∫—É
                if request_id % 7 == 0:
                    vinted_scanner.basic_system_errors += 1
                    result = vinted_scanner.should_switch_system()
                    return {"request_id": request_id, "error": True, "switched": result}
                else:
                    return {"request_id": request_id, "error": False, "switched": False}
            except Exception as e:
                return {"request_id": request_id, "error": True, "exception": str(e)}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 30 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        total_requests = 30
        successful_requests = 0
        errors = 0
        switches = 0
        
        print(f"üìä –ó–∞–ø—É—Å–∫ {total_requests} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(simulate_request, i) for i in range(total_requests)]
            
            for future in concurrent.futures.as_completed(futures):
                result = future.result()
                if result.get("error"):
                    errors += 1
                    if result.get("switched"):
                        switches += 1
                else:
                    successful_requests += 1
                
                print(f"   –ó–∞–ø—Ä–æ—Å {result['request_id']}: {'‚ùå' if result.get('error') else '‚úÖ'}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
        print(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_requests}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
        print(f"   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {switches}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.test_results.append({
            "test": "concurrent_stress",
            "total_requests": total_requests,
            "successful_requests": successful_requests,
            "errors": errors,
            "switches": switches,
            "final_system": vinted_scanner.current_system,
            "success": successful_requests > 0
        })
        
        return successful_requests > 0
    
    def test_5_telegram_stress(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç 5: Telegram API –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢ 5: Telegram API –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        print("=" * 60)
        
        self.reset_system()
        
        print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram:")
        print(f"   consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 30 –æ—à–∏–±–æ–∫ Telegram –ø–æ–¥—Ä—è–¥
        total_errors = 30
        error_types = ["429", "conflict", "getUpdates", "network", "timeout"]
        
        for i in range(total_errors):
            error_type = error_types[i % len(error_types)]
            vinted_scanner.telegram_antiblock.handle_telegram_error(error_type)
            
            if i % 5 == 0:
                print(f"   –û—à–∏–±–∫–∞ {i+1}: {error_type} (consecutive_errors = {vinted_scanner.telegram_antiblock.consecutive_errors})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        vinted_scanner.telegram_antiblock.handle_telegram_error("success")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Telegram —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
        print(f"   üìà –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ consecutive_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω—ã–π error_backoff: {vinted_scanner.telegram_antiblock.error_backoff}")
        
        success = vinted_scanner.telegram_antiblock.consecutive_errors == 0
        
        self.test_results.append({
            "test": "telegram_stress",
            "total_errors": total_errors,
            "final_consecutive_errors": vinted_scanner.telegram_antiblock.consecutive_errors,
            "final_error_backoff": vinted_scanner.telegram_antiblock.error_backoff,
            "success": success
        })
        
        return success
    
    def test_6_recovery_stress(self):
        """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç 6: –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢ 6: –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        print("=" * 60)
        
        self.reset_system()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        vinted_scanner.basic_system_errors = 25
        vinted_scanner.advanced_no_proxy_errors = 20
        vinted_scanner.advanced_proxy_errors = 15
        vinted_scanner.telegram_antiblock.consecutive_errors = 25
        vinted_scanner.telegram_antiblock.error_backoff = 15
        
        print(f"üìä –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è:")
        print(f"   - basic_system_errors: {vinted_scanner.basic_system_errors}")
        print(f"   - advanced_no_proxy_errors: {vinted_scanner.advanced_no_proxy_errors}")
        print(f"   - advanced_proxy_errors: {vinted_scanner.advanced_proxy_errors}")
        print(f"   - telegram_errors: {vinted_scanner.telegram_antiblock.consecutive_errors}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
        recovery_attempts = 5
        successful_recoveries = 0
        
        for i in range(recovery_attempts):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            vinted_scanner.basic_system_errors += 5
            vinted_scanner.advanced_no_proxy_errors += 5
            vinted_scanner.advanced_proxy_errors += 5
            vinted_scanner.telegram_antiblock.consecutive_errors += 5
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            vinted_scanner.auto_recovery_system()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if (vinted_scanner.basic_system_errors == 0 and 
                vinted_scanner.advanced_no_proxy_errors == 0 and
                vinted_scanner.advanced_proxy_errors == 0 and
                vinted_scanner.telegram_antiblock.consecutive_errors == 0):
                successful_recoveries += 1
                print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {i+1}: –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {i+1}: –ù–µ—É–¥–∞—á–Ω–æ")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print(f"   üìà –ü–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {recovery_attempts}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {successful_recoveries}")
        print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {vinted_scanner.current_system}")
        
        self.test_results.append({
            "test": "recovery_stress",
            "recovery_attempts": recovery_attempts,
            "successful_recoveries": successful_recoveries,
            "final_system": vinted_scanner.current_system,
            "success": successful_recoveries > 0
        })
        
        return successful_recoveries > 0
    
    def run_all_stress_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤"""
        print("üî• –ü–û–õ–ù–´–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–´ VINTED SCANNER")
        print("=" * 60)
        
        tests = [
            ("–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", self.test_1_basic_system_stress),
            ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞", self.test_2_advanced_system_stress),
            ("–ü—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º–∞", self.test_3_proxy_system_stress),
            ("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", self.test_4_concurrent_stress),
            ("Telegram API", self.test_5_telegram_stress),
            ("–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", self.test_6_recovery_stress)
        ]
        
        successful_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            try:
                print(f"\nüîÑ –ó–∞–ø—É—Å–∫: {test_name}")
                if test_func():
                    successful_tests += 1
                    print(f"   ‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
                else:
                    print(f"   ‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {test_name}: –û–®–ò–ë–ö–ê - {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        end_time = time.time()
        duration = end_time - self.start_time
        
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–û–í:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_tests/total_tests)*100:.1f}%")
        
        if successful_tests == total_tests:
            print(f"\nüéâ –í–°–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        
        return successful_tests == total_tests

def run_stress_tests():
    """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤"""
    tester = StressTestVintedScanner()
    return tester.run_all_stress_tests()

if __name__ == "__main__":
    run_stress_tests() 