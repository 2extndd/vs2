#!/usr/bin/env python3
"""
üéØ VintedScanner Manual PayPal Reservation Module

–†–£–ß–ù–û–ï —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ PayPal –ø–æ –∫–æ–º–∞–Ω–¥–µ/–∫–Ω–æ–ø–∫–µ –Ω–∞ 15 –º–∏–Ω—É—Ç
—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
1. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–æ–π "üí≥ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å"
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ò–õ–ò –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /reserve
3. –ë–æ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PayPal —Å—Å—ã–ª–∫—É
4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å–æ —Å–≤–æ–µ–≥–æ PayPal –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import time
import json
import logging
import requests
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler

class VintedManualReservation:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ PayPal"""
    
    def __init__(self, vinted_session_cookies: dict, user_agent: str):
        self.cookies = vinted_session_cookies
        self.headers = {
            "User-Agent": user_agent,
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "en-US,en;q=0.9",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "Referer": "https://www.vinted.it/",
            "Origin": "https://www.vinted.it"
        }
        self.active_reservations = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
        self.pending_items = {}        # –¢–æ–≤–∞—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def extract_item_id_from_url(self, item_url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ Vinted URL"""
        try:
            # URL —Ñ–æ—Ä–º–∞—Ç: https://www.vinted.it/items/3785692-chanel-bag
            if '/items/' in item_url:
                item_part = item_url.split('/items/')[1]
                item_id = item_part.split('-')[0]
                return item_id
            return None
        except:
            return None
    
    def store_item_for_reservation(self, item_id: str, item_data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.pending_items[item_id] = {
            'title': item_data.get('title', 'Unknown'),
            'price': item_data.get('price', '0‚Ç¨'),
            'url': item_data.get('url', ''),
            'image': item_data.get('image', ''),
            'size': item_data.get('size'),
            'stored_at': datetime.now()
        }
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        cutoff_time = datetime.now() - timedelta(hours=1)
        self.pending_items = {
            k: v for k, v in self.pending_items.items() 
            if v['stored_at'] > cutoff_time
        }
    
    def get_item_details(self, item_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            url = f"https://www.vinted.it/api/v2/items/{item_id}"
            response = requests.get(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                data = response.json()
                return data.get('item')
            else:
                logging.error(f"‚ùå Failed to get item details: {response.status_code}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error getting item details: {e}")
            return None
    
    def get_shipping_options(self, item_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            url = f"https://www.vinted.it/api/v2/items/{item_id}/shipping_options"
            response = requests.get(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                return response.json()
            else:
                logging.error(f"‚ùå Failed to get shipping options: {response.status_code}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error getting shipping options: {e}")
            return None
    
    def create_checkout_session(self, item_id: str, shipping_option_id: str) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ checkout (—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)"""
        try:
            checkout_data = {
                "item_id": int(item_id),
                "shipping_option_id": int(shipping_option_id),
                "payment_method": "paypal",
                "message": "Reserved via VintedScanner bot",
            }
            
            url = "https://www.vinted.it/api/v2/transactions"
            response = requests.post(
                url, 
                headers=self.headers, 
                cookies=self.cookies,
                json=checkout_data
            )
            
            if response.status_code == 201:
                transaction = response.json()
                logging.info(f"‚úÖ Manual reservation created: {transaction.get('id')}")
                return transaction
            else:
                logging.error(f"‚ùå Failed to create reservation: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error creating reservation: {e}")
            return None
    
    def get_paypal_payment_url(self, transaction_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayPal"""
        try:
            url = f"https://www.vinted.it/api/v2/transactions/{transaction_id}/payments/paypal"
            response = requests.post(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                payment_data = response.json()
                paypal_url = payment_data.get('redirect_url') or payment_data.get('payment_url')
                
                if paypal_url:
                    logging.info(f"‚úÖ PayPal URL obtained for manual reservation")
                    return paypal_url
                else:
                    logging.error(f"‚ùå No PayPal URL in response: {payment_data}")
                    return None
            else:
                logging.error(f"‚ùå Failed to get PayPal URL: {response.status_code}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error getting PayPal URL: {e}")
            return None
    
    def reserve_item_manually(self, item_id: str) -> Tuple[bool, Optional[str], Optional[str], Optional[str]]:
        """
        –†–£–ß–ù–û–ï —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            (success: bool, paypal_url: str, reservation_id: str, item_title: str)
        """
        try:
            logging.info(f"üéØ Manual reservation requested for item {item_id}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
            item_data = self.pending_items.get(item_id)
            item_title = item_data['title'] if item_data else "Unknown Item"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
            item_details = self.get_item_details(item_id)
            if not item_details:
                return False, None, None, item_title
            
            # –û–±–Ω–æ–≤–ª—è–µ–º title –∏–∑ API
            item_title = item_details.get('title', item_title)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not item_details.get('can_be_sold', False):
                logging.warning(f"‚ö†Ô∏è Item {item_id} cannot be sold")
                return False, None, None, item_title
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            shipping_options = self.get_shipping_options(item_id)
            if not shipping_options or not shipping_options.get('shipping_options'):
                logging.error(f"‚ùå No shipping options for item {item_id}")
                return False, None, None, item_title
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –¥–æ—Å—Ç–∞–≤–∫—É
            cheapest_shipping = min(
                shipping_options['shipping_options'], 
                key=lambda x: float(x.get('price', '999'))
            )
            shipping_id = cheapest_shipping['id']
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
            transaction = self.create_checkout_session(item_id, shipping_id)
            if not transaction:
                return False, None, None, item_title
            
            transaction_id = transaction['id']
            time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # –ü–æ–ª—É—á–∞–µ–º PayPal —Å—Å—ã–ª–∫—É
            paypal_url = self.get_paypal_payment_url(transaction_id)
            if not paypal_url:
                return False, None, transaction_id, item_title
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é
            reservation_info = {
                'item_id': item_id,
                'item_title': item_title,
                'transaction_id': transaction_id,
                'paypal_url': paypal_url,
                'reserved_at': datetime.now(),
                'expires_at': datetime.now() + timedelta(minutes=15),
                'shipping_cost': cheapest_shipping.get('price', '0'),
                'item_price': item_details.get('price', '0'),
                'reserved_by': 'manual'
            }
            
            self.active_reservations[transaction_id] = reservation_info
            
            logging.info(f"üéâ MANUAL RESERVATION SUCCESS: {item_title}")
            
            return True, paypal_url, transaction_id, item_title
            
        except Exception as e:
            logging.error(f"‚ùå Manual reservation error: {e}")
            return False, None, None, item_title if 'item_title' in locals() else "Unknown"


def create_reservation_keyboard(item_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("üí≥ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"reserve_{item_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)


def format_item_message_with_button(item_title: str, item_price: str, item_url: str, 
                                  item_size: str = None, topic_name: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    size_text = f"\nüëï –†–∞–∑–º–µ—Ä: {item_size}" if item_size else ""
    topic_text = f"\nüè∑Ô∏è –¢–æ–ø–∏–∫: {topic_name}" if topic_name else ""
    
    message = f"""<b>{item_title}</b>
üè∑Ô∏è {item_price}{size_text}{topic_text}
üîó {item_url}

üí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</i>"""
    
    return message


def format_reservation_success_message(item_title: str, item_price: str, paypal_url: str, 
                                     reservation_id: str, expires_at: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    
    message = f"""üéØ <b>–¢–û–í–ê–† –ó–ê–†–ï–ó–ï–†–í–ò–†–û–í–ê–ù!</b>

üì¶ <b>{item_title}</b>
üí∞ –¶–µ–Ω–∞: <b>{item_price}</b>
üÜî ID: <code>{reservation_id}</code>

‚è∞ <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ <b>{expires_at.strftime('%H:%M:%S')}</b> (15 –º–∏–Ω—É—Ç)

üîó <b>–°–°–´–õ–ö–ê –î–õ–Ø –û–ü–õ–ê–¢–´:</b>
<a href="{paypal_url}">üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –ß–ï–†–ï–ó PAYPAL</a>

üí° <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ
2. –í–æ–π–¥–∏—Ç–µ –≤ –°–í–û–ô PayPal –∞–∫–∫–∞—É–Ω—Ç  
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
4. –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤–∞—à!

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±–æ–≥–æ PayPal –∞–∫–∫–∞—É–Ω—Ç–∞!"""
    
    return message


def format_reservation_error_message(item_title: str, error_reason: str = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    reason_text = f"\nüìã –ü—Ä–∏—á–∏–Ω–∞: {error_reason}" if error_reason else ""
    
    message = f"""‚ùå <b>–û–®–ò–ë–ö–ê –†–ï–ó–ï–†–í–ê–¶–ò–ò</b>

üì¶ {item_title}{reason_text}

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
üí° –í–æ–∑–º–æ–∂–Ω–æ —Ç–æ–≤–∞—Ä —É–∂–µ –ø—Ä–æ–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    
    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
async def handle_reservation_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global manual_reservation_system
    
    query = update.callback_query
    await query.answer()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ callback_data
        if not query.data.startswith('reserve_'):
            return
        
        item_id = query.data.replace('reserve_', '')
        
        if not manual_reservation_system:
            await query.edit_message_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await query.edit_message_text("üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä—É—é —Ç–æ–≤–∞—Ä...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        success, paypal_url, reservation_id, item_title = manual_reservation_system.reserve_item_manually(item_id)
        
        if success and paypal_url:
            expires_at = datetime.now() + timedelta(minutes=15)
            success_msg = format_reservation_success_message(
                item_title, "—Å–º. –≤—ã—à–µ", paypal_url, reservation_id, expires_at
            )
            await query.edit_message_text(success_msg, parse_mode="HTML")
        else:
            error_msg = format_reservation_error_message(item_title)
            await query.edit_message_text(error_msg, parse_mode="HTML")
            
    except Exception as e:
        logging.error(f"‚ùå Error in reservation button handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏")


async def reserve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reserve –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º"""
    global manual_reservation_system
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç
        if not update.message.reply_to_message:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ /reserve –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º")
            return
        
        if not manual_reservation_system:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_message = update.message.reply_to_message.text or update.message.reply_to_message.caption
        
        if not original_message or 'vinted.it/items/' not in original_message:
            await update.message.reply_text("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä Vinted")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ URL
        import re
        url_match = re.search(r'https://www\.vinted\.it/items/(\d+)', original_message)
        
        if not url_match:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å—Å—ã–ª–∫–∏")
            return
        
        item_id = url_match.group(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        progress_msg = await update.message.reply_text("üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä—É—é —Ç–æ–≤–∞—Ä...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
        success, paypal_url, reservation_id, item_title = manual_reservation_system.reserve_item_manually(item_id)
        
        if success and paypal_url:
            expires_at = datetime.now() + timedelta(minutes=15)
            success_msg = format_reservation_success_message(
                item_title, "—Å–º. –≤—ã—à–µ", paypal_url, reservation_id, expires_at
            )
            await progress_msg.edit_text(success_msg, parse_mode="HTML")
        else:
            error_msg = format_reservation_error_message(item_title)
            await progress_msg.edit_text(error_msg, parse_mode="HTML")
            
    except Exception as e:
        logging.error(f"‚ùå Error in reserve command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
manual_reservation_system = None


if __name__ == "__main__":
    print("üß™ VintedManual Reservation Module - Manual Mode")
    print("This module provides MANUAL PayPal reservation for Vinted items")
    print("Integration required with main vinted_scanner.py")
