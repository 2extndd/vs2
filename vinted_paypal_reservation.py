#!/usr/bin/env python3
"""
üéØ VintedScanner PayPal Auto-Reservation Module

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ PayPal –Ω–∞ 15 –º–∏–Ω—É—Ç
—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ –¥—Ä—É–≥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.
"""

import time
import json
import logging
import requests
import random
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple

class VintedPayPalReservation:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ PayPal"""
    
    def __init__(self, vinted_session_cookies: dict, user_agent: str):
        self.cookies = vinted_session_cookies
        self.headers = {
            "User-Agent": user_agent,
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "en-US,en;q=0.9",
            "Content-Type": "application/json",
            "X-Requested-With": "XMLHttpRequest",
            "Referer": "https://www.vinted.it/",
            "Origin": "https://www.vinted.it"
        }
        self.reservations = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π
        
    def get_item_details(self, item_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
        try:
            url = f"https://www.vinted.it/api/v2/items/{item_id}"
            response = requests.get(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                data = response.json()
                return data.get('item')
            else:
                logging.error(f"‚ùå Failed to get item details: {response.status_code}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error getting item details: {e}")
            return None
    
    def get_shipping_options(self, item_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            url = f"https://www.vinted.it/api/v2/items/{item_id}/shipping_options"
            response = requests.get(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                return response.json()
            else:
                logging.error(f"‚ùå Failed to get shipping options: {response.status_code}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error getting shipping options: {e}")
            return None
    
    def create_checkout_session(self, item_id: str, shipping_option_id: str) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ checkout (—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)"""
        try:
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            checkout_data = {
                "item_id": int(item_id),
                "shipping_option_id": int(shipping_option_id),
                "payment_method": "paypal",  # –£–∫–∞–∑—ã–≤–∞–µ–º PayPal –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                "message": "",  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            }
            
            url = "https://www.vinted.it/api/v2/transactions"
            response = requests.post(
                url, 
                headers=self.headers, 
                cookies=self.cookies,
                json=checkout_data
            )
            
            if response.status_code == 201:  # Created
                transaction = response.json()
                logging.info(f"‚úÖ Checkout session created: {transaction.get('id')}")
                return transaction
            else:
                logging.error(f"‚ùå Failed to create checkout: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error creating checkout session: {e}")
            return None
    
    def get_paypal_payment_url(self, transaction_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayPal"""
        try:
            # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ PayPal URL
            url = f"https://www.vinted.it/api/v2/transactions/{transaction_id}/payments/paypal"
            response = requests.post(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                payment_data = response.json()
                paypal_url = payment_data.get('redirect_url') or payment_data.get('payment_url')
                
                if paypal_url:
                    logging.info(f"‚úÖ PayPal URL obtained: {paypal_url[:50]}...")
                    return paypal_url
                else:
                    logging.error(f"‚ùå No PayPal URL in response: {payment_data}")
                    return None
            else:
                logging.error(f"‚ùå Failed to get PayPal URL: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå Error getting PayPal URL: {e}")
            return None
    
    def reserve_item(self, item_id: str, item_title: str) -> Tuple[bool, Optional[str], Optional[str]]:
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ PayPal —Å—Å—ã–ª–∫–∏
        
        Returns:
            (success: bool, paypal_url: str, reservation_id: str)
        """
        try:
            logging.info(f"üéØ Starting reservation for item {item_id}: {item_title}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
            item_details = self.get_item_details(item_id)
            if not item_details:
                return False, None, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if not item_details.get('can_be_sold', False):
                logging.warning(f"‚ö†Ô∏è Item {item_id} cannot be sold")
                return False, None, None
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            shipping_options = self.get_shipping_options(item_id)
            if not shipping_options or not shipping_options.get('shipping_options'):
                logging.error(f"‚ùå No shipping options for item {item_id}")
                return False, None, None
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é –¥–æ—Å—Ç–∞–≤–∫—É
            cheapest_shipping = min(
                shipping_options['shipping_options'], 
                key=lambda x: float(x.get('price', '999'))
            )
            shipping_id = cheapest_shipping['id']
            
            logging.info(f"üì¶ Selected shipping: {cheapest_shipping.get('provider')} - {cheapest_shipping.get('price')}‚Ç¨")
            
            # 3. –°–æ–∑–¥–∞–µ–º checkout —Å–µ—Å—Å–∏—é (—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä)
            transaction = self.create_checkout_session(item_id, shipping_id)
            if not transaction:
                return False, None, None
            
            transaction_id = transaction['id']
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Vinted
            time.sleep(2)
            
            # 4. –ü–æ–ª—É—á–∞–µ–º PayPal —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            paypal_url = self.get_paypal_payment_url(transaction_id)
            if not paypal_url:
                logging.error(f"‚ùå Failed to get PayPal URL for transaction {transaction_id}")
                return False, None, transaction_id
            
            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
            reservation_info = {
                'item_id': item_id,
                'item_title': item_title,
                'transaction_id': transaction_id,
                'paypal_url': paypal_url,
                'reserved_at': datetime.now(),
                'expires_at': datetime.now() + timedelta(minutes=15),
                'shipping_cost': cheapest_shipping.get('price', '0'),
                'item_price': item_details.get('price', '0')
            }
            
            self.reservations[transaction_id] = reservation_info
            
            logging.info(f"üéâ RESERVATION SUCCESS!")
            logging.info(f"üìç Transaction ID: {transaction_id}")
            logging.info(f"üí∞ Item: {item_title}")
            logging.info(f"üîó PayPal URL: {paypal_url[:80]}...")
            logging.info(f"‚è∞ Expires: {reservation_info['expires_at'].strftime('%H:%M:%S')}")
            
            return True, paypal_url, transaction_id
            
        except Exception as e:
            logging.error(f"‚ùå Critical error in reserve_item: {e}")
            return False, None, None
    
    def get_active_reservations(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π"""
        now = datetime.now()
        active = {}
        
        for res_id, info in self.reservations.items():
            if info['expires_at'] > now:
                active[res_id] = info
            else:
                logging.info(f"‚è∞ Reservation {res_id} expired")
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        self.reservations = active
        return active
    
    def cancel_reservation(self, transaction_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)"""
        try:
            url = f"https://www.vinted.it/api/v2/transactions/{transaction_id}/cancel"
            response = requests.post(url, headers=self.headers, cookies=self.cookies)
            
            if response.status_code == 200:
                logging.info(f"‚úÖ Reservation {transaction_id} cancelled")
                if transaction_id in self.reservations:
                    del self.reservations[transaction_id]
                return True
            else:
                logging.error(f"‚ùå Failed to cancel reservation: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå Error cancelling reservation: {e}")
            return False
