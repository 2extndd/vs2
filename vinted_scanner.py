#!/usr/bin/env python3
import sys
import time
import json
import Config
import smtplib
import logging
import requests
import email.utils
import os
import signal
import asyncio
import threading
import random
from datetime import datetime
from email.message import EmailMessage
from logging.handlers import RotatingFileHandler
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes

# Override config with environment variables if available (for Railway)
if os.getenv('TELEGRAM_BOT_TOKEN'):
    Config.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
if os.getenv('TELEGRAM_CHAT_ID'):
    Config.telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')

# Configure logging
handler = RotatingFileHandler("vinted_scanner.log", maxBytes=5000000, backupCount=3)
logging.basicConfig(handlers=[handler], 
                    format="%(asctime)s - %(levelname)s - %(message)s", 
                    level=logging.INFO)

# Global variables
timeoutconnection = 30
list_analyzed_items = []
bot_running = True
scanner_thread = None
scan_mode = "fast"  # "fast" = 5-7s priority, 10-15s normal, "slow" = 15-20s priority, 30-45s normal
last_errors = []
telegram_errors = []
vinted_errors = []
vinted_521_count = 0  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ 521

# PRIORITY TOPICS - these scan more frequently
PRIORITY_TOPICS = ["bags", "bags 2"]

# ANTI-BLOCKING SYSTEM FOR VINTED
class VintedAntiBlock:
    def __init__(self):
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36"
        ]
        self.request_count = 0
        self.success_count = 0
        self.error_count = 0
        self.blocked_count = 0

    def get_headers(self):
        return {
            "User-Agent": random.choice(self.user_agents),
            "Accept": "application/json, text/plain, */*",
            "Accept-Language": "en-US,en;q=0.9",
            "DNT": "1",
            "Connection": "keep-alive",
            "Cache-Control": "no-cache"
        }

    def delay(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        self.request_count += 1
        
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        base_delay = random.uniform(0.5, 2.0)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
        if self.error_count > self.success_count:
            base_delay *= 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        if self.request_count % 10 == 0:
            base_delay += random.uniform(2, 5)
        
        # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        if self.blocked_count > 0:
            base_delay += random.uniform(3, 8)
        
        time.sleep(base_delay)
        return base_delay

    def handle_errors(self, response):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP"""
        if response.status_code == 429:
            self.blocked_count += 1
            wait = random.uniform(60, 120)
            logging.warning(f"üö´ Rate limit! –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {self.blocked_count}, –∂–¥–µ–º {wait:.0f}s")
            time.sleep(wait)
            return True
        elif response.status_code in [403, 503]:
            self.blocked_count += 1
            wait = random.uniform(30, 60)
            logging.warning(f"üö´ Blocked! –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {self.blocked_count}, –∂–¥–µ–º {wait:.0f}s")
            time.sleep(wait)
            return True
        elif response.status_code == 521:
            global vinted_521_count
            vinted_521_count += 1
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–æ–π
            if vinted_521_count <= 3:
                wait = random.uniform(120, 300)  # 2-5 –º–∏–Ω—É—Ç
            elif vinted_521_count <= 5:
                wait = random.uniform(300, 600)  # 5-10 –º–∏–Ω—É—Ç
            else:
                wait = random.uniform(600, 1200)  # 10-20 –º–∏–Ω—É—Ç
            
            logging.error(f"‚ùå Vinted —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (521)! –û—à–∏–±–∫–∞ #{vinted_521_count}, –∂–¥–µ–º {wait:.0f} —Å–µ–∫—É–Ω–¥")
            time.sleep(wait)
            return True
        elif response.status_code in [500, 502, 504]:
            wait = random.uniform(60, 180)  # 1-3 minutes for server errors
            logging.warning(f"Server error {response.status_code}! Wait {wait:.0f}s")
            time.sleep(wait)
            return True
        return False

# ANTI-BLOCKING SYSTEM FOR TELEGRAM
class TelegramAntiBlock:
    def __init__(self):
        self.message_count = 0
        self.last_message_time = 0
        self.success_count = 0
        self.error_count = 0
        self.rate_limited = 0
        
    def safe_delay(self):
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞"""
        self.message_count += 1
        current_time = time.time()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        min_delay = 3.0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
        if self.error_count > self.success_count:
            min_delay = 5.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        time_since_last = current_time - self.last_message_time
        if time_since_last < min_delay:
            sleep_time = min_delay - time_since_last
            time.sleep(sleep_time)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–∞—É–∑–∞ 3-8 —Å–µ–∫
        if self.message_count % 10 == 0:
            extra_delay = random.uniform(3, 8)
            logging.info(f"üõ°Ô∏è TG Anti-flood: {extra_delay:.1f}s pause after {self.message_count} messages")
            time.sleep(extra_delay)
        
        self.last_message_time = time.time()
        return min_delay

# Global instances
vinted_antiblock = VintedAntiBlock()
telegram_antiblock = TelegramAntiBlock()

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã
try:
    from antiban import antiban_system
    ADVANCED_ANTIBAN = True
    logging.info("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except ImportError:
    ADVANCED_ANTIBAN = False
    logging.warning("‚ö†Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è")

# Reservation System
class VintedReservation:
    def __init__(self):
        self.reserved_items = {}  # {item_id: {"url": "", "reserved_at": timestamp, "paypal_url": ""}}
        self.session = None
        self.is_logged_in = False
        
    def login_to_vinted(self):
        """–í—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Vinted"""
        if not Config.reservation_enabled:
            return False
            
        try:
            self.session = requests.Session()
            headers = {
                "User-Agent": Config.reservation_test_account["user_agent"],
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                "Accept-Language": "en-US,en;q=0.5",
                "Accept-Encoding": "gzip, deflate, br",
                "DNT": "1",
                "Connection": "keep-alive",
                "Upgrade-Insecure-Requests": "1"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
            login_url = f"{Config.vinted_url}/login"
            response = self.session.get(login_url, headers=headers, timeout=30)
            
            if response.status_code != 200:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞: {response.status_code}")
                return False
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ (CSRF —Ç–æ–∫–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã)
            # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ cookies –µ—Å–ª–∏ –µ—Å—Ç—å
            if Config.reservation_test_account["session_cookies"]:
                self.session.cookies.update(Config.reservation_test_account["session_cookies"])
                self.is_logged_in = True
                logging.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≥–æ—Ç–æ–≤—ã–µ cookies –¥–ª—è –≤—Ö–æ–¥–∞")
                return True
            
            logging.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Vinted: {str(e)[:50]}")
            return False
    
    def reserve_item(self, item_url, item_title):
        """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ PayPal"""
        if not self.is_logged_in:
            if not self.login_to_vinted():
                return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            response = self.session.get(item_url, timeout=30)
            if response.status_code != 200:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞: {response.status_code}")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ URL
            item_id = item_url.split('/')[-1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä
            if item_id in self.reserved_items:
                existing = self.reserved_items[item_id]
                time_passed = time.time() - existing["reserved_at"]
                if time_passed < Config.reservation_timeout:
                    remaining = Config.reservation_timeout - time_passed
                    logging.info(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {remaining:.0f} —Å–µ–∫—É–Ω–¥")
                    return existing["paypal_url"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π
            active_reservations = len([r for r in self.reserved_items.values() 
                                     if time.time() - r["reserved_at"] < Config.reservation_timeout])
            
            if active_reservations >= Config.reservation_max_items:
                logging.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π ({Config.reservation_max_items})")
                return None
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ PayPal
            # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            paypal_url = f"{Config.vinted_url}/checkout/{item_id}/paypal"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏
            self.reserved_items[item_id] = {
                "url": item_url,
                "title": item_title,
                "reserved_at": time.time(),
                "paypal_url": paypal_url
            }
            
            logging.info(f"‚úÖ –¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω: {item_title}")
            return paypal_url
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {str(e)[:50]}")
            return None
    
    def get_reservation_status(self, item_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if item_id not in self.reserved_items:
            return None
        
        reservation = self.reserved_items[item_id]
        time_passed = time.time() - reservation["reserved_at"]
        
        if time_passed >= Config.reservation_timeout:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–µ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
            del self.reserved_items[item_id]
            return None
        
        return {
            "remaining_time": Config.reservation_timeout - time_passed,
            "paypal_url": reservation["paypal_url"],
            "title": reservation["title"]
        }
    
    def cleanup_expired_reservations(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"""
        current_time = time.time()
        expired_items = []
        
        for item_id, reservation in self.reserved_items.items():
            if current_time - reservation["reserved_at"] >= Config.reservation_timeout:
                expired_items.append(item_id)
        
        for item_id in expired_items:
            del self.reserved_items[item_id]
            logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–µ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: {item_id}")
        
        return len(expired_items)

# Global reservation instance
reservation_system = VintedReservation()

def load_analyzed_item():
    try:
        with open("vinted_items.txt", "r", errors="ignore") as f:
            for line in f:
                line = line.strip()
                if line:
                    list_analyzed_items.append(line)
        logging.info(f"Loaded {len(list_analyzed_items)} items")
    except:
        logging.info("Starting fresh")

def save_analyzed_item(item_id):
    try:
        with open("vinted_items.txt", "a") as f:
            f.write(str(item_id) + "\n")
    except Exception as e:
        logging.error(f"Save error: {e}")

def add_error(error_text, error_type="general"):
    global last_errors, telegram_errors, vinted_errors
    timestamp = datetime.now().strftime('%H:%M:%S')
    error_entry = f"{timestamp}: {error_text}"
    
    last_errors.append(error_entry)
    if len(last_errors) > 3:
        last_errors = last_errors[-3:]
    
    if error_type == "telegram":
        telegram_errors.append(timestamp)
        if len(telegram_errors) > 10:
            telegram_errors = telegram_errors[-10:]
    elif error_type == "vinted":
        vinted_errors.append(timestamp)
        if len(vinted_errors) > 10:
            vinted_errors = vinted_errors[-10:]

def send_email(item_title, item_price, item_url, item_image, item_size=None):
    try:
        msg = EmailMessage()
        msg["To"] = Config.smtp_toaddrs
        msg["From"] = email.utils.formataddr(("Vinted Scanner", Config.smtp_username))
        msg["Subject"] = "Vinted Scanner - New Item"
        
        size_text = f"\nüëï {item_size}" if item_size else ""
        body = f"{item_title}\nüè∑Ô∏è {item_price}{size_text}\nüîó {item_url}"
        msg.set_content(body)
        
        with smtplib.SMTP(Config.smtp_server, 587) as server:
            server.starttls()
            server.login(Config.smtp_username, Config.smtp_psw)
            server.send_message(msg)
        logging.info("Email sent")
    except Exception as e:
        add_error(f"Email: {str(e)[:30]}")

def send_slack_message(item_title, item_price, item_url, item_image, item_size=None):
    try:
        size_text = f"\nüëï {item_size}" if item_size else ""
        message = f"*{item_title}*\nüè∑Ô∏è {item_price}{size_text}\nüîó {item_url}"
        
        response = requests.post(
            Config.slack_webhook_url, 
            json={"text": message},
            timeout=timeoutconnection
        )
        if response.status_code == 200:
            logging.info("Slack sent")
        else:
            add_error(f"Slack: {response.status_code}")
    except Exception as e:
        add_error(f"Slack: {str(e)[:30]}")

def send_telegram_message(item_title, item_price, item_url, item_image, item_size=None, thread_id=None):
    try:
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
        telegram_antiblock.safe_delay()
        
        size_text = f"\nüëï {item_size}" if item_size else ""
        
        # Find topic name
        topic_info = ""
        if thread_id:
            for name, data in Config.topics.items():
                if data.get('thread_id') == thread_id:
                    topic_info = f"\nüè∑Ô∏è {name}"
                    break
        
        message = f"<b>{item_title}</b>\nüè∑Ô∏è {item_price}{size_text}{topic_info}\nüîó {item_url}"

        # Try send to topic
        if thread_id:
            params = {
                "chat_id": Config.telegram_chat_id,
                "photo": item_image,
                "caption": message,
                "parse_mode": "HTML",
                "message_thread_id": thread_id
            }
            
            response = requests.post(
                f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendPhoto",
                data=params, 
                timeout=timeoutconnection
            )
            
            if response.status_code == 200:
                telegram_antiblock.success_count += 1
                logging.info(f"‚úÖ Sent to topic {thread_id}")
                return True
            else:
                telegram_antiblock.error_count += 1
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 (Too Many Requests)
                if response.status_code == 429:
                    telegram_antiblock.rate_limited += 1
                    retry_after = response.json().get("parameters", {}).get("retry_after", 30)
                    logging.warning(f"üö´ TG Rate limit! Rate limits: {telegram_antiblock.rate_limited}, waiting {retry_after}s")
                    time.sleep(retry_after + 2)  # +2 —Å–µ–∫ –∑–∞–ø–∞—Å
                add_error(f"TG topic: {response.status_code}", "telegram")
        
        # Fallback to main chat
        params = {
            "chat_id": Config.telegram_chat_id,
            "photo": item_image,
            "caption": message + "\n‚ö†Ô∏è Main chat",
            "parse_mode": "HTML",
        }
        
        response = requests.post(
            f"https://api.telegram.org/bot{Config.telegram_bot_token}/sendPhoto",
            data=params,
            timeout=timeoutconnection
        )
        
        if response.status_code == 200:
            telegram_antiblock.success_count += 1
            logging.info("‚úÖ Sent to main chat")
            return True
        else:
            telegram_antiblock.error_count += 1
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 (Too Many Requests)
            if response.status_code == 429:
                telegram_antiblock.rate_limited += 1
                retry_after = response.json().get("parameters", {}).get("retry_after", 30)
                logging.warning(f"üö´ TG Rate limit! Rate limits: {telegram_antiblock.rate_limited}, waiting {retry_after}s")
                time.sleep(retry_after + 2)  # +2 —Å–µ–∫ –∑–∞–ø–∞—Å
            add_error(f"TG main: {response.status_code}", "telegram")
            return False

    except Exception as e:
        add_error(f"TG: {str(e)[:30]}", "telegram")
        return False

def should_exclude_item(item, exclude_catalog_ids, topic_name=""):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ catalog_id"""
    if not exclude_catalog_ids:
        return False
    
    item_catalog_id = item.get('catalog_id')
    if not item_catalog_id:
        return False
    
    item_catalog_str = str(item_catalog_id)
    exclude_list = [id.strip() for id in exclude_catalog_ids.split(',') if id.strip()]
    
    is_excluded = item_catalog_str in exclude_list
    
    if is_excluded:
        logging.info(f"üö´ EXCLUDED [{topic_name}]: catalog_id={item_catalog_str}")
    
    return is_excluded

def scanner_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global bot_running
    
    while bot_running:
        try:
            logging.info("ÔøΩÔøΩ Starting scan cycle")
            
            # Get session with dynamic headers
            session = requests.Session()
            headers = vinted_antiblock.get_headers()
            
            # Get cookies
            session.post(Config.vinted_url, headers=headers, timeout=timeoutconnection)
            cookies = session.cookies.get_dict()
            
            # Anti-block delay
            vinted_antiblock.delay()
            
            # PRIORITY SCAN: Scan priority topics more frequently
            for topic_name in PRIORITY_TOPICS:
                if not bot_running:
                    break
                    
                if topic_name in Config.topics:
                    topic_data = Config.topics[topic_name]
                    scan_topic(topic_name, topic_data, cookies, session, is_priority=True)
                    
                    # Small delay between priority topics
                    if bot_running:
                        time.sleep(random.uniform(0.2, 0.5))
            
            # NORMAL SCAN: Scan all topics including priority ones again
            for topic_name, topic_data in Config.topics.items():
                if not bot_running:
                    break
                    
                scan_topic(topic_name, topic_data, cookies, session, is_priority=(topic_name in PRIORITY_TOPICS))
                
                # Small delay between topics
                if bot_running and len(Config.topics) > 1:
                    time.sleep(random.uniform(0.3, 1.0))

            # –°–£–ü–ï–†–ë–´–°–¢–†–´–ï –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π
            if Config.reservation_enabled:
                expired_count = reservation_system.cleanup_expired_reservations()
                if expired_count > 0:
                    logging.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π")
            
            if bot_running:
                if scan_mode == "fast":
                    # Fast mode: Priority topics every 5-7s, normal every 10-15s
                    delay = random.uniform(5, 7)  # –°–£–ü–ï–†–ë–´–°–¢–†–û –¥–ª—è priority
                    logging.info(f"üê∞ FAST: wait {delay:.0f}s")
                else:
                    # Slow mode: Priority topics every 15-20s, normal every 30-45s  
                    delay = random.uniform(15, 20)  # –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è priority
                    logging.info(f"üêå SLOW: wait {delay:.0f}s")
                time.sleep(delay)
                
        except Exception as e:
            add_error(f"Scanner: {str(e)[:30]}")
            logging.error(f"Error: {e}")
            if bot_running:
                time.sleep(20)

def scan_topic(topic_name, topic_data, cookies, session, is_priority=False):
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞"""
    priority_mark = "ÔøΩÔøΩ" if is_priority else ""
    logging.info(f"Scanning{priority_mark}: {topic_name}")
    
    params = topic_data["query"].copy()  # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    exclude_catalog_ids = topic_data.get("exclude_catalog_ids", "")
    thread_id = topic_data.get("thread_id")
    
    # –ò—Å–∫–ª—é—á–∞–µ–º catalog_ids –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç
    if exclude_catalog_ids and params.get("catalog_ids"):
        query_catalog_ids = params["catalog_ids"]
        exclude_list = [id.strip() for id in exclude_catalog_ids.split(',') if id.strip()]
        query_list = [id.strip() for id in query_catalog_ids.split(',') if id.strip()]
        
        # –£–±–∏—Ä–∞–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ ID –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        filtered_query_list = [id for id in query_list if id not in exclude_list]
        
        if filtered_query_list != query_list:
            removed_ids = set(query_list) - set(filtered_query_list)
            logging.info(f"üîß [{topic_name}] –£–±—Ä–∞–ª –∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {removed_ids}")
            params["catalog_ids"] = ','.join(filtered_query_list)
    
    # Get new headers for each topic
    topic_headers = vinted_antiblock.get_headers()
    
    # Request with anti-blocking
    response = requests.get(
        f"{Config.vinted_url}/api/v2/catalog/items", 
        params=params, 
        cookies=cookies, 
        headers=topic_headers,
        timeout=timeoutconnection
    )

    # Handle errors
    if vinted_antiblock.handle_errors(response):
        return
    
    if response.status_code == 200:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ 521 –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        global vinted_521_count
        if vinted_521_count > 0:
            logging.info(f"‚úÖ Vinted —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ 521")
            vinted_521_count = 0
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        vinted_antiblock.success_count += 1
        
        data = response.json()

        if data and "items" in data:
            logging.info(f"Found {len(data['items'])} items for {topic_name}")
            
            for item in data["items"]:
                if not bot_running:
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                if should_exclude_item(item, exclude_catalog_ids, topic_name):
                    continue
                    
                item_id = str(item["id"])
                
                if item_id not in list_analyzed_items:
                    item_title = item["title"]
                    item_url = item["url"]
                    item_price = f'{item["price"]["amount"]} {item["price"]["currency_code"]}'
                    item_image = item["photo"]["full_size_url"]
                    item_size = item.get("size_title")

                    priority_log = "üî• PRIORITY " if is_priority else ""
                    logging.info(f"üÜï {priority_log}NEW: {item_title} - {item_price}")

                    # Send notifications
                    if Config.smtp_username and Config.smtp_server:
                        send_email(item_title, item_price, item_url, item_image, item_size)

                    if Config.slack_webhook_url:
                        send_slack_message(item_title, item_price, item_url, item_image, item_size)

                    if Config.telegram_bot_token and Config.telegram_chat_id:
                        success = send_telegram_message(item_title, item_price, item_url, item_image, item_size, thread_id)

                    # Save item
                    list_analyzed_items.append(item_id)
                    save_analyzed_item(item_id)
        else:
            logging.warning(f"No items: {topic_name}")
    else:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫–∏
        vinted_antiblock.error_count += 1
        
        if response.status_code == 521:
            logging.error(f"‚ùå Vinted —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (521) –¥–ª—è —Ç–æ–ø–∏–∫–∞: {topic_name}")
            add_error(f"HTTP 521 - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "vinted")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ {response.status_code}: {topic_name}")
            add_error(f"HTTP {response.status_code}", "vinted")

# Telegram bot commands
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running, scan_mode, last_errors, telegram_errors, vinted_errors
    status = "üü¢ Running" if bot_running else "ÔøΩÔøΩ Stopped"
    items_count = len(list_analyzed_items)
    
    mode_emoji = "üê∞" if scan_mode == "fast" else "üêå"
    if scan_mode == "fast":
        mode_interval = "5-7s priority, 10-15s normal"
    else:
        mode_interval = "15-20s priority, 30-45s normal"
    mode_info = f"\n{mode_emoji} Mode: {scan_mode} ({mode_interval})"
    
    anti_info = f"\nüõ°Ô∏è Vinted requests: {vinted_antiblock.request_count}"
    anti_info += f"\nüåê Vinted success/errors: {vinted_antiblock.success_count}/{vinted_antiblock.error_count}"
    anti_info += f"\nüö´ Vinted blocks: {vinted_antiblock.blocked_count}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã
    if ADVANCED_ANTIBAN:
        try:
            advanced_stats = antiban_system.get_stats()
            anti_info += f"\nüöÄ Advanced AntiBan:"
            anti_info += f"\n   üìä Total requests: {advanced_stats['total_requests']}"
            anti_info += f"\n   ‚ùå Total errors: {advanced_stats['total_errors']}"
            anti_info += f"\n   üö´ Total blocks: {advanced_stats['total_blocks']}"
            anti_info += f"\n   üìà Success rate: {advanced_stats['success_rate']:.1f}%"
            anti_info += f"\n   üîÑ Session: {advanced_stats['current_session']}/{advanced_stats['sessions_count']}"
        except Exception as e:
            anti_info += f"\nüöÄ Advanced AntiBan: ERROR - {str(e)[:30]}"
    
    anti_info += f"\nüì± Telegram messages: {telegram_antiblock.message_count}"
    anti_info += f"\nüì± TG success/errors: {telegram_antiblock.success_count}/{telegram_antiblock.error_count}"
    anti_info += f"\nüö´ TG rate limits: {telegram_antiblock.rate_limited}"
    anti_info += f"\nüî• Priority: {', '.join(PRIORITY_TOPICS)}"
    if vinted_521_count > 0:
        anti_info += f"\n‚ö†Ô∏è 521 errors: {vinted_521_count}"
    
    # Formatted error info
    error_info = ""
    if telegram_errors:
        tg_count = len(telegram_errors)
        tg_last = telegram_errors[-1] if telegram_errors else "N/A"
        error_info += f"\nüì± Telegram ({tg_count})({tg_last})"
        
    if vinted_errors:
        vinted_count = len(vinted_errors)
        vinted_last = vinted_errors[-1] if vinted_errors else "N/A"
        error_info += f"\nüåê Vinted ({vinted_count})({vinted_last})"
    
    if last_errors:
        error_info += f"\n‚ùå Recent:\n" + "\n".join(last_errors[-2:])
    
    response = f"{status}\nüìä Items: {items_count}{mode_info}{anti_info}{error_info}"
    await update.message.reply_text(response)

async def log_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /log"""
    try:
        if not os.path.exists("vinted_scanner.log"):
            await update.message.reply_text("üìù –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        with open("vinted_scanner.log", "r", encoding="utf-8", errors="ignore") as f:
            lines = f.readlines()
            
        if not lines:
            await update.message.reply_text("üìù –õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç")
            return
            
        last_lines = lines[-8:] if len(lines) >= 8 else lines
        log_text = "".join(last_lines)
        
        if len(log_text) > 3500:
            log_text = log_text[-3500:]
            log_text = "...\n" + log_text[log_text.find('\n')+1:]
        
        await update.message.reply_text(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏:\n```\n{log_text}\n```", parse_mode="Markdown")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {str(e)[:100]}")

async def threadid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–ê–ë–û–ß–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /threadid —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    message = update.message
    
    if message.is_topic_message and message.message_thread_id:
        thread_id = message.message_thread_id
        
        # –ù–∞–π—Ç–∏ —Ç–æ–ø–∏–∫
        topic_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        topic_data = None
        for name, data in Config.topics.items():
            if data.get('thread_id') == thread_id:
                topic_name = name
                topic_data = data
                break
        
        await update.message.reply_text(f"üßµ Thread ID: {thread_id}\nüìç –¢–æ–ø–∏–∫: {topic_name}\nüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        if topic_data:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                headers = vinted_antiblock.get_headers()
                session = requests.Session()
                session.post(Config.vinted_url, headers=headers, timeout=timeoutconnection)
                cookies = session.cookies.get_dict()
                
                params = topic_data["query"]
                exclude_catalog_ids = topic_data.get("exclude_catalog_ids", "")
                
                response = requests.get(f"{Config.vinted_url}/api/v2/catalog/items", 
                                      params=params, cookies=cookies, headers=headers)
                
                if response.status_code == 200:
                    data = response.json()
                    if data and "items" in data:
                        sent_count = 0
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                        for item in data["items"]:
                            if not should_exclude_item(item, exclude_catalog_ids):
                                item_id = str(item["id"])
                                
                                # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                if item_id in list_analyzed_items:
                                    list_analyzed_items.remove(item_id)
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
                                item_title = item["title"]
                                item_url = item["url"]
                                item_price = f'{item["price"]["amount"]} {item["price"]["currency_code"]}'
                                item_image = item["photo"]["full_size_url"]
                                item_size = item.get("size_title")
                                
                                success = send_telegram_message(item_title, item_price, item_url, item_image, item_size, thread_id)
                                if success:
                                    sent_count += 1
                                    # –ü–ê–£–ó–ê 3 –°–ï–ö–£–ù–î–´ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (anti-blocking)
                                    time.sleep(3)
                                
                                list_analyzed_items.append(item_id)
                                save_analyzed_item(item_id)
                        
                        await update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {topic_name}")
                    else:
                        await update.message.reply_text(f"‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ API –¥–ª—è —Ç–æ–ø–∏–∫–∞ {topic_name}")
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                    
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
        else:
            await update.message.reply_text(f"‚ùå –¢–æ–ø–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–ø–∏–∫–∞—Ö!")

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running, scanner_thread, list_analyzed_items
    await update.message.reply_text("üîÑ Restarting...")
    
    bot_running = False
    if scanner_thread:
        scanner_thread.join(timeout=5)
    
    list_analyzed_items.clear()
    try:
        with open("vinted_items.txt", "w") as f:
            f.write("")
    except:
        pass
    
    await asyncio.sleep(1)
    
    bot_running = True
    scanner_thread = threading.Thread(target=scanner_loop, daemon=True)
    scanner_thread.start()
    
    await update.message.reply_text("‚úÖ Restarted!")

async def fast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global scan_mode
    scan_mode = "fast"
    await update.message.reply_text("üê∞ FAST mode: 5-7s priority, 10-15s normal")

async def slow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /slow command - set slow scanning mode (120 seconds)"""
    global scan_mode
    scan_mode = "slow"
    await update.message.reply_text("üêå –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ú–ï–î–õ–ï–ù–ù–´–ô\n‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 120 —Å–µ–∫—É–Ω–¥")
    logging.info("Scan mode changed to SLOW (120 seconds)")
async def chatinfo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /chatinfo command - chat diagnostics"""
    try:
        chat = update.effective_chat
        bot = context.bot
        
        # Get full chat info
        chat_full = await bot.get_chat(chat.id)
        
        info = f"üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</b>\n"
        info += f"üìä ID: <code>{chat.id}</code>\n"
        info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or 'N/A'}\n"
        info += f"üè∑Ô∏è –¢–∏–ø: {chat.type}\n"
        
        if hasattr(chat_full, 'member_count') and chat_full.member_count:
            info += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{chat_full.member_count}</b>\n"
        
        if hasattr(chat_full, 'is_forum'):
            info += f"üßµ –§–æ—Ä—É–º: {'‚úÖ –î–∞' if chat_full.is_forum else '‚ùå –ù–µ—Ç'}\n"
        
        await update.message.reply_text(info, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

async def vinted_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Vinted API"""
    try:
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å Vinted API...")
        
        headers = vinted_antiblock.get_headers()
        session = requests.Session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç
        try:
            response = session.get(Config.vinted_url, headers=headers, timeout=10)
            main_status = f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω ({response.status_code})" if response.status_code == 200 else f"‚ùå –û—à–∏–±–∫–∞ ({response.status_code})"
        except Exception as e:
            main_status = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)[:50]}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        try:
            test_params = {'page': '1', 'per_page': '1'}
            response = session.get(f"{Config.vinted_url}/api/v2/catalog/items", 
                                  params=test_params, headers=headers, timeout=10)
            api_status = f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç ({response.status_code})" if response.status_code == 200 else f"‚ùå –û—à–∏–±–∫–∞ ({response.status_code})"
        except Exception as e:
            api_status = f"‚ùå –û—à–∏–±–∫–∞ API: {str(e)[:50]}"
        
        status_msg = f"üåê <b>–°—Ç–∞—Ç—É—Å Vinted</b>\n"
        status_msg += f"üì± –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: {main_status}\n"
        status_msg += f"üîó API: {api_status}\n"
        status_msg += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        
        await update.message.reply_text(status_msg, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)[:100]}")

async def debug_filter_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É include –∏ exclude"""
    try:
        debug_msg = "üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
        
        for topic_name, topic_data in Config.topics.items():
            query_catalog_ids = topic_data["query"].get("catalog_ids", "")
            exclude_catalog_ids = topic_data.get("exclude_catalog_ids", "")
            
            if query_catalog_ids and exclude_catalog_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                query_list = [id.strip() for id in query_catalog_ids.split(',') if id.strip()]
                exclude_list = [id.strip() for id in exclude_catalog_ids.split(',') if id.strip()]
                
                conflicts = [id for id in exclude_list if id in query_list]
                
                if conflicts:
                    debug_msg += f"‚ö†Ô∏è <b>{topic_name}</b>\n"
                    debug_msg += f"üì• Include: {query_catalog_ids}\n"
                    debug_msg += f"üì§ Exclude: {exclude_catalog_ids}\n"
                    debug_msg += f"üö´ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã: {', '.join(conflicts)}\n\n"
                else:
                    debug_msg += f"‚úÖ <b>{topic_name}</b> - –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n\n"
            else:
                debug_msg += f"‚ÑπÔ∏è <b>{topic_name}</b> - –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
        
        await update.message.reply_text(debug_msg, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)[:100]}")

async def reserve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /reserve <item_url>"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: /reserve <—Å—Å—ã–ª–∫–∞>")
            return
        
        item_url = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Vinted
        if not item_url.startswith(Config.vinted_url):
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Vinted!")
            return
        
        await update.message.reply_text("üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä—É—é —Ç–æ–≤–∞—Ä...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ URL
        item_id = item_url.split('/')[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = reservation_system.get_reservation_status(item_id)
        if status:
            remaining_minutes = int(status["remaining_time"] // 60)
            remaining_seconds = int(status["remaining_time"] % 60)
            await update.message.reply_text(
                f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}:{remaining_seconds:02d}\n"
                f"üîó PayPal: {status['paypal_url']}"
            )
            return
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        paypal_url = reservation_system.reserve_item(item_url, "–¢–æ–≤–∞—Ä")
        
        if paypal_url:
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç!\n"
                f"üîó PayPal: {paypal_url}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            asyncio.create_task(reservation_countdown(item_id, item_url, update.message.chat_id))
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)[:100]}")

async def reservation_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π"""
    try:
        if not reservation_system.reserved_items:
            await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π")
            return
        
        status_msg = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        
        for item_id, reservation in reservation_system.reserved_items.items():
            time_passed = time.time() - reservation["reserved_at"]
            remaining_time = Config.reservation_timeout - time_passed
            
            if remaining_time > 0:
                remaining_minutes = int(remaining_time // 60)
                remaining_seconds = int(remaining_time % 60)
                status_msg += f"üïê {reservation['title']}\n"
                status_msg += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}:{remaining_seconds:02d}\n"
                status_msg += f"üîó PayPal: {reservation['paypal_url']}\n\n"
        
        await update.message.reply_text(status_msg, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)[:100]}")

async def reservation_countdown(item_id, item_url, chat_id):
    """–û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—Ç–∞–π–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º bot –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from telegram.ext import Application
        app = Application.get_current()
        bot = app.bot
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await bot.send_message(
            chat_id=chat_id,
            text=f"‚è∞ <b>–û—Ç—Å—á–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n"
                 f"üîó –¢–æ–≤–∞—Ä: {item_url}\n"
                 f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: 15:00",
            parse_mode="HTML"
        )
        
        while True:
            await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            status = reservation_system.get_reservation_status(item_id)
            if not status:
                # –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message.message_id,
                    text=f"‚è∞ <b>–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ!</b>\n"
                         f"üîó –¢–æ–≤–∞—Ä: {item_url}\n"
                         f"‚è±Ô∏è –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}",
                    parse_mode="HTML"
                )
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
            remaining_minutes = int(status["remaining_time"] // 60)
            remaining_seconds = int(status["remaining_time"] % 60)
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message.message_id,
                text=f"‚è∞ <b>–û—Ç—Å—á–µ—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n"
                     f"üîó –¢–æ–≤–∞—Ä: {item_url}\n"
                     f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}:{remaining_seconds:02d}",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {str(e)[:50]}")

async def reply_reserve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update.message.reply_to_message:
            await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º –∫–æ–º–∞–Ω–¥–æ–π /reserve")
            return
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Vinted –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        original_text = update.message.reply_to_message.text
        vinted_links = []
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏ Vinted
        words = original_text.split()
        for word in words:
            if word.startswith(Config.vinted_url):
                vinted_links.append(word)
        
        if not vinted_links:
            await update.message.reply_text("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ Vinted")
            return
        
        item_url = vinted_links[0]
        await update.message.reply_text("üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä—É—é —Ç–æ–≤–∞—Ä...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ URL
        item_id = item_url.split('/')[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = reservation_system.get_reservation_status(item_id)
        if status:
            remaining_minutes = int(status["remaining_time"] // 60)
            remaining_seconds = int(status["remaining_time"] % 60)
            await update.message.reply_text(
                f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}:{remaining_seconds:02d}\n"
                f"üîó PayPal: {status['paypal_url']}"
            )
            return
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        paypal_url = reservation_system.reserve_item(item_url, "–¢–æ–≤–∞—Ä")
        
        if paypal_url:
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç!\n"
                f"üîó PayPal: {paypal_url}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            asyncio.create_task(reservation_countdown(item_id, item_url, update.message.chat_id))
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)[:100]}")

async def unified_reserve_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ —Å—Å—ã–ª–∫—É
        if context.args:
            item_url = context.args[0]
        # –ï—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –Ω–µ–≥–æ
        elif update.message.reply_to_message:
            original_text = update.message.reply_to_message.text
            vinted_links = []
            words = original_text.split()
            for word in words:
                if word.startswith(Config.vinted_url):
                    vinted_links.append(word)
            
            if not vinted_links:
                await update.message.reply_text("‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ Vinted")
                return
            
            item_url = vinted_links[0]
        else:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º: /reserve <—Å—Å—ã–ª–∫–∞>")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Vinted
        if not item_url.startswith(Config.vinted_url):
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Vinted!")
            return
        
        await update.message.reply_text("üîÑ –†–µ–∑–µ—Ä–≤–∏—Ä—É—é —Ç–æ–≤–∞—Ä...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ URL
        item_id = item_url.split('/')[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        status = reservation_system.get_reservation_status(item_id)
        if status:
            remaining_minutes = int(status["remaining_time"] // 60)
            remaining_seconds = int(status["remaining_time"] % 60)
            await update.message.reply_text(
                f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_minutes}:{remaining_seconds:02d}\n"
                f"üîó PayPal: {status['paypal_url']}"
            )
            return
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        paypal_url = reservation_system.reserve_item(item_url, "–¢–æ–≤–∞—Ä")
        
        if paypal_url:
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç!\n"
                f"üîó PayPal: {paypal_url}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            asyncio.create_task(reservation_countdown(item_id, item_url, update.message.chat_id))
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)[:100]}")



def signal_handler(signum, frame):
    global bot_running
    logging.info("Shutdown signal received")
    bot_running = False
    sys.exit(0)

async def setup_bot():
    application = Application.builder().token(Config.telegram_bot_token).build()
    
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("log", log_command))
    application.add_handler(CommandHandler("threadid", threadid_command))
    application.add_handler(CommandHandler("restart", restart_command))
    application.add_handler(CommandHandler("fast", fast_command))
    application.add_handler(CommandHandler("slow", slow_command))
    application.add_handler(CommandHandler("chatinfo", chatinfo_command))
    application.add_handler(CommandHandler("vinted", vinted_status_command))
    application.add_handler(CommandHandler("debug", debug_filter_command))
    application.add_handler(CommandHandler("reserve", unified_reserve_command))
    application.add_handler(CommandHandler("reservations", reservation_status_command))    
    return application

def main():
    global bot_running, scanner_thread
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    load_analyzed_item()
    
    logging.info("üöÄ SUPERFAST Vinted Scanner with Priority Topics & Telegram AntiBlock!")
    
    # Start scanner
    scanner_thread = threading.Thread(target=scanner_loop, daemon=True)
    scanner_thread.start()
    
    # Start bot
    if Config.telegram_bot_token and Config.telegram_chat_id:
        try:
            async def run_bot():
                application = await setup_bot()
                await application.initialize()
                await application.start()
                await application.updater.start_polling(drop_pending_updates=True)
                
                while bot_running:
                    await asyncio.sleep(1)
                    
                await application.updater.stop()
                await application.stop()
                await application.shutdown()
            
            asyncio.run(run_bot())
            
        except KeyboardInterrupt:
            logging.info("Stopped by user")
        except Exception as e:
            logging.error(f"Bot error: {e}")
            try:
                while bot_running:
                    time.sleep(2)  # ANTI-BLOCKING
            except KeyboardInterrupt:
                pass
    else:
        try:
            while bot_running:
                time.sleep(2)  # ANTI-BLOCKING
        except KeyboardInterrupt:
            pass

if __name__ == "__main__":
    main()
